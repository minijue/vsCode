<html>
<body text="#000000" bgcolor="#ffffff">
<table>
<tr><td width=600>
<P><center>
<font color="#0000ff"><h2>
用 分 布 式 对 象 技 术 构 造Java 应 用
</h2></font>
<font color="#ff00ff"><h3>
用Java，RMI 和HORB 实 现 分 布 式 对 象 环 境
</h3></font>
<hr>
</center><p>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<b>摘 要</b> 本 文 原 发 表 在 十 二 月 的 日 文JavaWorld 印 刷 版 上， 概 括 地 介 绍 了 分 布 式 对 象 技 术， 重 点 介 绍 了 其 中 的 两 种 具 体 技 术： 远 程 方 法 启 用（RMI） 和Hirano 对 象 请 求 代 理（HORB）。 通 过 代 码 实 例 和 图 解， 你 自 己 便 能 判 定 哪 种 分 布 式 对 象 技 术 最 适 合 你。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

 直 到 最 近， 软 件 程 序 用 面 向 对 象 设 计 方 法 创 建 时， 设 计 主 要 运 行 在 单 机 的 内 存 里。 为 了 使 软 件 适 应 网 络 运 用 和 保 存 在 二 级 存 贮 里， 除 了 面 向 对 象 方 法 以 外， 还 需 要 其 他 的 设 计 方 法。 人 们 开 发 了 面 向 网 络 的 分 布 式 对 象 技 术 来 解 决 这 个 问 题。 同 时， 可 以 将 对 象 直 接 存 贮 在 二 级 存 贮 里 的 面 向 对 象 数 据 库（ODBMS） 技 术 诞 生 了。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 这 些 技 术 都 不 是 新 的，-- 支 持ODBMS 的 开 发 工 具 在90 年 代 早 期 便 出 现 在 市 场 上， 然 而 这 些 产 品 不 是 价 格 太 高， 使 用 无 名 的 语 言， 就 是 没 有 获 得 工 程 师 行 业 的 广 泛 认 可。 随 着Java 的 出 现， 分 布 式 对 象 技 术 和ODBMS 技 术 得 到 了 进 一 步 的 发 展， 而 且 价 格 下 降 了， 所 以 获 得 了 工 程 师 们 的 接 受。 根 据 最 近 软 件 的 动 向， 这 些 技 术 得 到 越 来 越 广 泛 的 关 注。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 很 明 显， 未 来 的 软 件 环 境 必 须 包 括 三 项 重 要 的 技 术：
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
1. “ 面 向 对 象”
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
2. “ 网 络”
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
3. “ 数 据 库”
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 这 些 环 境 可 以 用 分 布 式 对 象 技 术 和ODBMS 来 实 现。 本 文 的 中 心 是 基 于Java 的 分 布 式 对 象 技 术。

<h3> 什 么 是 分 布 式 对 象</h3>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 简 单 说 来， 分 布 式 对 象 技 术 允 许 在 不 同 机 器 上 的 对 象 相 互 传 递 消 息（Java 方 法 调 用）。 为 了 便 于 理 解 什 么 是 分 布 式 对 象， 请 看 图1， 一 个 网 络 卡 拉OK 模 型 的 设 计。 正 如 你 看 到 的， 当 一 个 远 程 操 作 在 服 务 器 中 的Karaoke box 执 行 歌 曲 选 择 时， 一 个Music 对 象 将 被 送 到 客 户 机。 客 户 机 通 过 发 送“ 播 放” 消 息 启 动 音 乐。 以 下 定 义 一 些 术 语： 等 同 于Karaoke box 的 对 象 称 为“ 远 程 对 象”， 发 送 给 客 户 机 的Music 对 象 称 为“ 拷 贝 对 象”， 由 客 户 机 发 往 服 务 器 上 的Karaoke box 对 象 的 消 息 称 为“ 远 程 消 息”， 我 们 将 用 这 个 模 型 实 现 一 个 分 布 式 对 象 系 统。
<P><center>
<img src="Pics/9801-5-1.gif"><P>
 图1： 网 络 卡 拉OK 模 型 图</center><p>

<h3>RMI 和HORB 概 述</h3>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 本 文 的 中 心 是 两 项 分 布 式 对 象 技 术：RMI（ 远 程 方 法 启 用）， 它 捆 绑 于JDK1.1 的 标 准 特 征 中， 和HORB（Hirano 对 象 请 求 代 理）， 它 由 美 国 国 家 电 子 研 究 所（ 国 际 贸 易 和 工 业 部） 的Satoshi Hirano 开 发。 本 文 的 最 后 将 介 绍CORBA， 它 致 力 于 成 为 工 业 标 准 的 分 布 式 对 象 系 统。 关 于HORB 的 最 新 信 息， 可 在 以 下URL 中 查 到：http://ring .tel.go.jp/openlab/horb/。

<h3> 分 布 式 对 象 的 应 用（HORB 与RMI）</h3>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 我 试 图 用 这 两 项 技 术， HORB 和RMI 来 构 造 一 个 分 布 式 对 象 系 统。 理 解 这 些 技 术 最 快 的 方 法 是 通 过 获 得 实 际 的 动 手 经 验。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 首 先， 我 们 将 基 于 网 络 卡 拉OK 模 型 设 计 类。 图2 为 一 个 类 示 图， 它 说 明 了 基 于 内 部 类 结 构 和 类 创 建 的 实 例 之 间 的 关 系 结 构。
<P><center>
<img src="Pics/9801-5-2.gif"><P>
 图2： 网 络 卡 拉OK 模 型 的 类 示 图</center><p>

<h3>HORB 介 绍</h3>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 这 部 分 提 供 一 个 如 何 使 用HORB 的 例 子。 与RMI 相 比，HORB 允 许 以 类 似 于 常 规 面 向 对 象 编 程 的 格 式 编 码， 列 表1 是HORB 卡 拉OK 类 的 源 代 码（Karaoke.java）

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 列 表1：Karaoke box 类[HORB]
<pre>
class KaraokeBox{
      void hello(String s){
                System.out.println("Client Name " + s);
      }
}
</pre>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 列 表2 是 使 用Karaoke box 的 客 户 机 的 源 代 码（Client.java）。 首 先 调 用KaraokeBox 类 的hello() 方 法。 到 此， 程 序 不 是 分 布 式 对 象。 对KaraokeBox 类 的hello() 方 法 的 调 用 也 是 本 地 调 用。

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 列 表2： 使 用Karaoke box 的 客 户 机 的 源 代 码[HORB]
<pre>
class Client{
   public static void main(String argv[]){ 
        String name = (argv.length == 1) ? argv[0] : "-";
        KaraokeBox  box = new KaraokeBox();
        box.hello(name);
 }
}

</pre>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 现 在 我 们 将 用 一 个 小 魔 术 将KaraokeBox 转 换 成 远 程 对 象。 首 先 对 客 户 机 源 代 码 做 修 改。 如 列 表3 所 示。 这 将 告 诉 你 在 远 程 操 作 中 如 何 使 用KaraokeBox(Client.java)。 由 列 表2 中 修 改 的 部 分 用 注 释 标 注。 在 列 表3 中， 创 建 了KaraokeBox_Proxy 的 实 例， 而 不 是KaraokeBox。 那 么 什 么 时 候 创 建 最 重 要 的KaraokeBox 实 例 ？ 答 案 是 在 创 建KaraokeBox_Proxy 实 例 时。

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 列 表3： 在 远 程 操 作 中 使 用KaraokeBox（Client.java）[HORB]
<pre>
import horb.orb.*;          // Add

class Client{
   public static void main(String argv[]){
       String name = (argv.length == 1) ? argv[0] : "-";
       KaraokeBox_Proxy box = new KaraokeBox_Proxy("horb://kinta"); // Change (change host name)
       box.hello(name);
  }
}
</pre>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 在 下 面 的 代 码 例 子 中， 你 将 看 到 在RMI 操 作 中 如 何 使 用KaraokeBox（Client.java）

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 列 表4： 在RMI 操 作 中 使 用KaraokeBox（Client.java）[RMI]
<pre>
class Client{
   public static void main(String argv[]){
       String name = (argv.length == 1) ? argv[0] : "-";
       try{                                                                              // Change
         KaraokeBox box = (KaraokeBox)java.rmi.Naming.lookup("rmi://kinta/karaokebox1"); // Change
         box.hello(name);
       }                                                                                 // Change
       catch(Exception e){e.printStackTrace();}                                          // Change
  }
}
</pre>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
图3 显 示 了Karaoke box 的 机 制。
<P><center><img src="Pics/9801-5-3.gif"><P>
图3：Karaoke box 的 远 程 操 作 机 制[HORB]</center><p>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
KaraokeBox_Proxy 称 为KaraokeBox 的“ 代 理 对 象”。 KaraokeBox 的 实 际 实 例 位 于 服 务 器 上（ 本 例 中 的 主 机 名 为“kinta”）。 客 户 机 创 建KaraokeBox_Proxy 的 实 例 作 为 代 理 对 象。 发 送 给KaraokeBox 的 消 息 先 发 给KaraokeBox_Proxy， 消 息 通 过KaraokeBox_Proxy 和 被 称 为Karaoke_Skeleton 的 机 制 转 发 给KaraokeBox 实 例，Karaoke_Skeleton 位 于 服 务 器 上， 结 果 返 回 到 客 户 机。 所 以 远 程 对 象 操 作 才 成 为 可 能。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 这 是 必 要 的 源 代 码 修 改。HORB 一 个 很 好 特 点 是 远 程 对 象KaraokeBox 的 源 代 码 根 本 不 用 修 改。
<h3> 创 建 运 行 环 境</h3>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
HORB 编 译 器 会 自 动 创 建KaraokeBox_Proxy 和Karaoke_Skeleton。 与 往 常 一 样，Client.java 用Java 编 程 器 编 译。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
1.> horbc KaraokeBox.java 创 建
<ul><li> KaraokeBox.class
<br><li> KaraokeBox_Proxy.class
<br><li> KaraokeBox_Skeleton.class</ul>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
2.> javac Client.java  创 建
<ul><li> Client.class.</ul>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
3. 将Client.class 和KaraokeBox_Proxy.class 拷 贝 到 客 户 机， 将KaraokeBox.class 和KaraokeBox_Skeleton.class 拷 贝 到 服 务 器（HORB 必 须 安 装 在 客 户 机 和 服 务 器 上）。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 运 行 过 程
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
1. 在 服 务 器 上 启 动HORB 精 灵。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
2. 在 客 户 机 上 以 字 符 串“Junzo” 作 为 参 数 启 动Client.
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
3. 结 果"Client Name Junzo" 显 示 在 服 务 器 上。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 运 行 结 果 如 图4 所 示
<P><center><img src="Pics/9801-5-4.gif"><P>
 图4 ：HORB 运 行 结 果</center><p>

<h3>RMI 介 绍</h3>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 本 部 分 介 绍 如 何 使 用RMI。 首 先， 修 改 客 户 机 的 源 代 码， 如 列 表4 所 示。 修 改 的 位 置 几 乎 与HORB 的 修 改 一 样。 从 列 表2 的 修 改 用 注 释 标 注。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 在 列 表4 中， 使 用 了 称 为lookup() 的RMI 方 法 代 替 调 用new 创 建KaraokeBox 的 实 例。lookup() 创 建KaraokeBox 实 例 吗 ？ 实 际 上， 不。 其 中 原 因 以 后 解 释。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 使 用RMI，KaraokeBox 源 代 码 也 要 修 改。 首 先 要 创 建Java 接 口。 列 表5 是KaraokeBox 接 口 的 源 代 码（KaraokeBox.java）。 客 户 机 从lookup() 接 收 到 的 对 象 类 型 就 是 此 接 口。

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 列 表5：Karaoke box 接 口（KaraokeBox.java）[RMI]
<pre>
interface KaraokeBox extends java.rmi.Remote{

   public void hello(String s) throws java.rmi.RemoteException;

}
</pre>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
列 表6 是 实 现 接 口 的 类 的 源 代 码（KaraokeBoxImpl.java）。 与 最 初 的 非 分 布 式 对 象 源 代 码 相 比（ 列 表1）， 它 具 有 更 多 的 代 码。

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 列 表6：Karaoke box 实 现（KaraokeBoxImpl.java）[RMI]
<pre>
import java.rmi.*;
import java.rmi.server.UnicastRemoteObject;

public class KaraokeBoxImpl extends UnicastRemoteObject implements KaraokeBox{
    public KaraokeBoxImpl() throws RemoteException{
        super();
    }

    public void hello(String s) throws RemoteException{
        System.out.println("Client Name " + s);
    }

    public static void main(String argv[]){
        System.setSecurityManager(new RMISecurityManager());
         try{
           KaraokeBox box = new KaraokeBoxImpl();
            java.rmi.Naming.rebind("karaokebox1", box);
         }
         catch(Exception e){e.printStackTrace();}
     }
}
</pre>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 以 下 是 源 代 码 必 要 的 修 改。 在RMI 中， 远 程 对 象 用 指 定 的 名 字（rebind.bind） 注 册。 虽 然 这 些 名 字 不 需 在 源 代 码 中 指 定， 象HORB，RMI 使 用 对 象 进 行 远 程 对 象 操 作， 这 些 对 象 称 为Stub( 与HORB 中 的“ 代 理” 等 同) 和Skeleton.
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 创 建 运 行 环 境
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
RMI 有 等 同 于HORB 编 译 器 相 应 部 分 的 功 能， 这 些 功 能 自 动 创 建Stub 和Skeleton.
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
1.> javac Client.java  KaraokeBox.java  KaraokeBoxImpl.java  创 建
<ul><li> Client.class
<br><li> KaraokeBox.class
<br><li> KaraokeBoxImpl.class.</ul>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
2.> Rmic KaraokeBoxImpl  创 建
<ul><li> KaraokeBoxImpl_Stub.class 
<br><li> KaraokeBoxImpl_Skel.class</ul>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
3. 将Client.class、KaraokeBox.class 和KaraokeBoxImpl_Stub.class 拷 贝 到 客 户 机， 将KaraokeBox.class、KaraokeBoxImpl.class、KaraokeBoxImpl_Stub.class 和KaraokeBoxImpl_Skel.class 拷 贝 到 服 务 器（ 在 客 户 机 和 服 务 器 上 必 须 安 装RMI）.
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 运 行 过 程
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
1. 在 服 务 器 上 启 动RMI 注 册。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
2. 服 务 器 上 启 动KaraokeBoxImpl 对 象。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
3. 在 客 户 机 上 以 字 符 串“Junzo” 作 为 参 数 启 动Client。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
4. 结 果“Client Name Junzo” 显 示 在 服 务 器 上。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 运 行 结 果 如 图5 所 示。

<P><center>
<img src="Pics/9801-5-5.gif"><P>
 图5：RMI 运 行 结 果</center><p>
<h3>
 基 础 对 象 模 型 介 绍</h3>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 这 部 分 用 上 面 的 源 代 码 说 明HORB 和RIM 的 基 础 对 象 模 型。 基 础 对 象 模 型 是 指 当 一 个 远 程 对 象 产 生 和 使 用 时， 给 远 程 对 象 用 户 的 视 图。 在 基 础 对 象 模 型 方 面，HORB 和RMI 相 差 很 大。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 产 生 模 型[HORB，DCOM]
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 产 生 模 型 提 供 与 面 向 对 象 编 程 一 样 的 实 例 创 建 方 法。 参 看 列 表3 中 加 入 的 部 分（HORB 客 户 机 源 代 码）。 下 面 的 列 表 包 括 了 产 生KaraokeBox_Proxy 的 源 代 码。

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 代 码 １： 代 理 对 象 创 建
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
KaraokeBox_Proxy box = new KaraokeBox_Proxy("horb://YourHostName");
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

 回 忆 一 下，KaraokeBox 实 例 也 是 它 的 一 个 运 行 结 果。 换 句 话 说， 如 果 你 把KaraokeBox_Proxy 当 作KaraokeBox 使 用， 就 可 以 用 面 向 对 象 编 程 中 通 常 的 实 例 产 生 过 程 一 样 的 方 法 创 建 远 程 对 象。 如 图 ６ 所 示。
<P><center>
<img src="Pics/9801-5-6.gif"><P>
 图 ６：HORB 产 生 模 型</center><p>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 连 接 模 型[CORBA(Java IDL)、RMI、HORB、PDO(NEXTSTEP)]
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 连 接 模 型 用 来 连 接 先 前 由 服 务 器 产 生 的 对 象。 用 连 接 模 型， 客 户 机 不 象 在 产 生 模 型 中 那 样 简 单 地 创 建KaraokeBox 实 例， 而 是 由 服 务 器 先 创 建 对 象。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 将RMI 的 运 行 过 程 与HORB 的 运 行 过 程 比 较， 很 明 显， 服 务 器 启 动KaraokeBoxImpl 是 为 了 客 户 机 能 够 启 动Client， 如 图7 所 示。

<P><center>
<img src="Pics/9801-5-7.gif"><P>
 图7：RMI 连 接 模 型</center><p>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 下 面 的 列 表 包 括 允 许 客 户 机 连 接 远 程 对 象 的 源 代 码

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 代 码2： 连 接 远 程 对 象

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
KaraokeBox box = (KaraokeBox)Naming.lookup("rmi://YourHostName/karaokebox1");

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 在RMI 中， 在 服 务 器 源 代 码 中 加 入 源 代 码（ 列 表5 和 列 表6） 的 原 因 是 必 须 创 建Main() 方 法， 以 便 加 入 产 生 远 程 对 象 的 代 码。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 几 乎 所 有 的 分 布 式 对 象 技 术 都 提 供 连 接 模 型。HORB 既 支 持 产 生 模 型 又 支 持 连 接 模 型。 连 接 模 型 的 一 个 问 题 是 客 户 机 只 能 连 接 由 服 务 器 产 生 的 对 象。 为 解 决 此 问 题， 使 用 了 一 种 技 术， 在 返 回 客 户 机 之 前 由 服 务 器 创 建 客 户 机 请 求 的 远 程 对 象。 以 下 是 这 种 技 术 的 一 个 例 子。

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 代 码3： 创 建 客 户 机 请 求 的 远 程 对 象
<pre>
  public KaraokeBox getObject() throws RemoteException{
      KaraokeBox box = null;
      try{
         box = new KaraokeBoxImpl("karaokebox" + instanceNo );
      }
      catch(Exception e){e.printStackTrace();}
      return box;
}
</pre>
<h3> 远 程 消 息</h3>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 在RMI 和HORB 中， 在 远 程 对 象 可 用 后 发 送 一 个 远 程 消 息 的 方 法 几 乎 是 一 样 的。 图8 显 示 了 调 用hello() 方 法 和 往 服 务 器 拷 贝 一 个 字 符 串 实 例（ 作 为hello() 方 法 的 参 数）。

<P><center><img src="Pics/9801-5-8.gif"><P>
 图8： 远 程 消 息</center><p>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 在 此 处 理 中， 分 布 式 对 象 系 统 将String 接 口 转 化 为 简 单 的 数 据 流， 并 用 低 级 的Socket 类 将 数 据 发 送 给 服 务 器。 服 务 器 将String 类 恢 复 成 以 前 的 形 式， 这 种 机 制 称 为“marshalling” 和“unmarshalling”。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 现 在 问 题 是： 一 个 新 创 建 的、 独 立 的 类 实 例 能 否 作 为 一 个 远 程 消 息 参 数 或 一 个 返 回 值 ？ 答 案 在 下 面 关 于 对 象 传 递 的 解 释 中。

<h3> 对 象 传 递</h3>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 将 对 象 实 例 作 为 一 个 远 程 方 法 的 参 数 传 递 或 作 为 一 个 远 程 方 法 的 返 回 值 称 为“ 对 象 传 递”。 作 为 例 子， 我 们 调 用KaraokeBox 的getMusic() 方 法，（ 图9）。 客 户 机 作 为 参 数 传 送 歌 曲 选 择 数， 作 为 返 回 值 接 收 相 应 的Music 对 象。

<P><center>
<img src="Pics/9801-5-9.gif"><P>
 图9：Music 对 象 来 自 服 务 器</center><p>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
1. 由HORB 传 递 对 象
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 首 先 我 们 提 供 一 个 使 用HORB 的 调 用 例 子。 在KaraokeBox 中 加 入 了 注 册getMusic() 方 法 的 构 造 器， 并 且 在 初 始 化 时 为 十 首 歌 加 入Music 对 象。

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 列 表7：Music 对 象 传 递（KaraokeBox.java）[HORB]
<pre>
import java.util.*;

class KaraokeBox{
  Hashtable musicbox = new Hashtable();
  public KaraokeBox(){
      for(int i=0;i < 10;i++){
         musicbox.put( new Integer(i), new Music(i,"Music" + i) ); // Register music
      }
  }

  public void hello(String s){
      System.out.println("Client Name " + s);
  }

  public Music getMusic(int select_no){
     Music music = (Music)musicbox.get(new Integer(select_no));
     return music; // Return music for specified song selection number
  }
}
</pre>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 下 面 建 立Music 类， 如 列 表8 所 示。 注 意 在HORB 的 当 前 版 本 中， 在 对 象 中 只 有 公 用 的“ 友 好” 属 性（ 友 好 属 性 是 没 有 指 定 为 公 用 或 者 私 有 的 属 性） 才 能 传 递。 这 限 制 在 支 持JDK 1.1 的HORB 下 一 版 本 中 可 能 会 被 取 消。

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 列 表8：Music 数 据 管 理 类（Music.java）[HORB]
<pre>
public class Music{
    int no = 0;
    String title = "";
    String musicdata = "";

    final static String[] SOUNDS = {"Tan", "Bom", "Tata", "Ra-ra"};

    public  Music(){}

    public  Music(int no,String title){
        this.no = no;
        this.title = title;
        for(int i=0;i < 8;i++){
          musicdata += SOUNDS[(int)(Math.random() * 4)] ;   // Create song (laugh)
        }
         System.out.println("new .." + title + ": " + musicdata );
    }

    public int getNo(){
        return no;
    }

    public String getTitle(){
        return title;
    }

    public void play(){
        System.out.println("start --> " + musicdata + " --> stop");
    }
}
</pre>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 注 意， 在HORB 当 前 版 本， 只 能 传 递 不 包 括 保 护 或 私 有 成 员 的 对 象 实 例， 这 一 限 制 在 支 持JDK1.1 的HORB 下 一 版 本 中 可 能 会 被 取 消。 就 象 对hello() 方 法 一 样， 接 收Music 对 象 的 代 码 加 入 到Client 源 代 码 中。

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 列 表9： 接 收Music 对 象 的 版 本（Client.java）[HORB]
<pre>
import horb.orb.*;

class Client{
   public static void main(String argv[]){ 
       String name = (argv.length == 1) ? argv[0] : "-";
       KaraokeBox_Proxy  box = new KaraokeBox_Proxy("horb://kinta");
       box.hello(name);
       for(int i=0;i < 10;i++){
          Music m = box.getMusic(i);        // Object is copied from server
          System.out.print("No." + m.getNo() + " [" + m.getTitle() + "] ");
          m.play();
       }
    }
}
</pre>
<h3> 创 建 运 行 环 境</h3>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
用HORB 命 令 编 译Music.java 和KaraokeBox.java 和 用javac 编 译Client.java 的 过 程 如 下。 注 意Music.java 必 须 用HORB 编 译。 如 不 用HORB 传 递 对 象， 必 须 用 一 个 代 理。 为 了 以 后 简 单， 确 定 按 下 面 的 方 法 指 定HORB 编 译 器 选 项， 使 之 不 产 生 不 必 要 的 源 代 码 和 类。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
1.>horbc -delete -proxyonly Music.java  创 建
<ul><li> Music.class
<br><li> Music_proxy.class.</ul>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
2.>horbc -delete KaraokeBox.java  创 建
<ul><li> KaraokeBox.class
<br><li> KaraokeBox_Proxy.class
<br><li> KaraokeBox_Skeleton.class</ul>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
3.>javac Client.java  创 建
<ul><li> Client.class
<br><li>horbc 选 项：</ul>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-proxyonly 产 生 一 个Proxy 类， 不 产 生Skeleton 类。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-Delete 删 除Skeleton 和Proxy 源 代 码。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 运 行 过 程
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
1. 在 服 务 器 上 启 动HORB 精 灵。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
2. 在 客 户 机 上 用 字 符 串“Junzo” 作 为 参 数 启 动Client
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
3. 十 个 音 乐 数 据 项 显 示 在 服 务 器 和 客 户 机 上。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 运 行 结 果 如 图10 所 示。

<P><center><img src="Pics/9801-5-10.gif"><P>
 图10：HORB 运 行 结 果（ 对 象 传 递）</center><p>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
2. 用RMI 传 递 对 象
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 第 一 步 是 增 加KaraokeBox 加 载， 以 及 和 用HORB 一 样，getMusic() 方 法 和Music 对 象 注 册 的 代 码。 另 外，KaraokeBox 和KaraokeBoxImpl 的 源 代 码 也 必 须 修 改（ 参 看 列 表10 和 列 表11）。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

 列 表10：KaraokeBox 接 口（KaraokeBox.java）[RMI]
<pre>
interface KaraokeBox extends java.rmi.Remote{
   public void hello(String s) throws java.rmi.RemoteException;
   public Music getMusic(int select_no) throws java.rmi.RemoteException;
}
</pre>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 列 表11：Music 对 象 传 递（KaraokeBoxImpl.java）[RMI]
<pre>
import java.rmi.*;
import java.rmi.server.UnicastRemoteObject;
import java.util.Hashtable;

public class KaraokeBoxImpl extends UnicastRemoteObject implements KaraokeBox{
    private Hashtable musicbox = new Hashtable();
    public KaraokeBoxImpl() throws RemoteException{
        super();
        for(int i=0;i < 10;i++){
           musicbox.put( new Integer(i), new Music(i,"Music" + i) ); // Register music
        }
    }

    public void hello(String s) throws RemoteException{
    System.out.println("Client Name " + s);
    }

    public Music getMusic(int select_no) throws RemoteException{
        Music music = (Music)musicbox.get(new Integer(select_no));
        return music;  // Return music for specified song selection number
    }

    public static void main(String argv[]){
        try{
          KaraokeBox box = new KaraokeBoxImpl();
          System.setSecurityManager(new RMISecurityManager());
          java.rmi.Naming.rebind("karaokebox1", box);
        }
        catch(Exception e){e.printStackTrace();}
    }
}
</pre>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
RMI 对 象 传 递 中 使 用 了JDK1.1 的 串 行 化 功 能。Music 类 必 须 实 现java.io.Serializable Java 接 口（ 参 看 列 表12）。 不 象HORB，RMI 允 许 传 递 有 私 有 成 员 的 对 象。

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 列 表12：Music 数 据 管 理 类（Music.java）[RMI]
<pre>
public class Music implements java.io.Serializable{
    private int no = 0;
    private String title = "";
    private String musicdata = "";
    private final static String[] SOUNDS = {"Tan", "Bom", "Tata", "Ra-ra"};

    public  Music(int no,String title){
        this.no = no;
        this.title = title;
        for(int i=0;i < 8;i++){                            
           musicdata += SOUNDS[(int)(Math.random() * 4)] ;  // Compose song (laugh)
        }

        System.out.println("new .." + title + ": " + musicdata );
    }

    public int getNo(){
        return no;
    }

    public String getTitle(){
        return title;
    }

    public void play(){
        System.out.println("start --> " + musicdata + " --> stop");
    }
}
</pre>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 与HORB 一 样， 接 收Music 对 象 的 代 码 加 到 了 客 户 机 的 源 代 码 中， 如 列 表13 所 示。

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 列 表13： 接 收 版 本 的Music 对 象（Client.java）[RMI]
<pre>
class Client{
   public static void main(String argv[]){
       String name = (argv.length == 1) ? argv[0] : "-";
       try{
          KaraokeBox box = (KaraokeBox)java.rmi.Naming.lookup("rmi://kinta/karaokebox1");
          box.hello(name);
          for(int i=0;i < 10;i++){
              Music m = box.getMusic(i);
              System.out.print("No." + m.getNo() + " [" + m.getTitle() + "] ");
              m.play();
          }
       }
       catch(Exception e){e.printStackTrace();}
   }
}
</pre>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 创 建 运 行 环 境
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
不 象 用HORB， 而 与 往 常 一 样 用javac 编 译Music.java
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
1.> Javac Music.java Client.java KaraokeBox.java KaraokeBoxImpl.java
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
2.> rmic KaraokeBoxImpl

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 运 行 过 程
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
1. 在 服 务 器 上 启 动RMI 注 册。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
2. 在 服 务 器 上 启 动KaraokeBoxImpl 远 程 对 象。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
3. 十 个 音 乐 数 据 项 显 示 在 服 务 器 上。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
4. 在 客 户 机 上 以 字 符 串“Junzo” 作 为 参 数 启 动Client。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
5. 十 个 音 乐 数 据 项 显 示 在 客 户 机 上。
 运 行 结 果 如 图11 所 示（ 在 示 例 代 码 中，“lookup”（ 第 四 步） 必 须 在“rebind”（ 第 三 步） 结 束 后 运 行）。

<P><center>
<img src="Pics/9801-5-11.gif"><P>
 图11：RMI 运 行 结 果（ 对 象 传 递）</center><p>

<h3> 分 布 式 应 用 程 序 的 设 计</h3>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 以 下 是 在 设 计 分 布 式 应 用 程 序 时 需 要 考 虑 的 几 点：
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 理 解 产 品 的 特 征
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 在 开 发 分 布 式 应 用 程 序 时 重 要 的 一 点 是 掌 握 使 用 的 分 布 式 对 象 的 一 般 特 征。 最 好 的 办 法 是 将 你 的 产 品 与 其 他 的、 已 存 在 的 产 品 比 较。 另 外， 还 需 要 理 解 产 品 的 概 念。 例 如HORB 追 求 一 种 无 缝 的、 分 布 式 的 面 向 对 象 环 境， 所 以 列 表1 中 介 绍 的KaraokeBox 类 无 需 为 远 程 服 务 器 设 计 而 修 改。 另 外， 使 用KaraokeBox 类 的 客 户 机 与 本 地 对 象 一 样 ─ ─ 调 用new。 即 使 在 远 程 方 法 调 用 时， 程 序 员 在 编 码 时 无 需 使 用 异 常 处 理。

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 比 较 而 言，RMI 要 求 程 序 员 按 照 精 确 的 规 则 设 计 分 布 式 对 象， 以 提 高 软 件 的 整 体 可 靠 性。 例 如 设 计 远 程 对 象 时， 程 序 必 须 使 用Java 接 口， 与 本 地 方 法 一 样 对 对 象 明 确 分 类。 另 外， 在 远 程 方 法 调 用 中， 程 序 员 必 须 处 理 异 常。 与HORB 的 另 一 个 差 别 是 父 类 是 在 远 程 对 象 中 决 定 的。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 若 要 问 哪 一 个 是 当 前 最 好 的 方 案， 我 们 更 倾 向HORB 网 络 无 缝 的 概 念。 当 然， 每 个 人 都 有 个 人 的 偏 爱， 未 必 能 有 一 个 客 观 的 评 价。HORB 也 提 供 很 高 的 可 靠 性， 而RMI 和HORB 一 样， 一 但 你 习 惯 了 它 也 会 很 容 易 使 用。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 这 时 与 其 讨 论 谁 优 谁 劣， 不 如 客 观 地 比 较HORB 和RMI。 这 样 我 们 便 可 以 理 解 所 使 用 的 分 布 式 对 象 技 术 创 造 者 的 目 的。 在 弥 补 其 不 足 时， 理 解 软 件。 同 时， 洞 查 分 布 式 对 象 未 来 的 形 式。 总 之， 符 合 发 展 趋 势 的 便 是 最 好 的 方 案。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 明 确 指 出 分 布 式 处 理 的 目 标
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 决 定 哪 一 项 设 为 远 程 对 象 是 很 重 要 的 一 点。 将 单 机 内 存 对 象 扩 展 到 网 络 上 便 成 了 分 布 式 对 象。 设 计 远 程 对 象 时， 程 序 员 还 要 考 虑 涉 及 到 的 其 他 问 题。 具 体 地 说， 程 序 员 必 须 考 虑 诸 如 在 远 程 处 理 时 尽 量 减 少 网 络 传 输 量 和 使 客 户 机 与 远 程 对 象 接 口 尽 可 能 小 等 问 题。 建 立 一 个 系 统 时， 为 了 有 一 个 平 衡 的 设 计， 必 须 考 虑 在 网 络 中 包 括 分 布 式 对 象 的 需 求。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 正 确 使 用 对 象 传 递 和 远 程 对 象
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 正 确 的 使 用 对 象 传 递 和 远 程 对 象 也 是 很 重 要 的 一 点。 远 程 对 象 是 通 过 代 理 访 问 服 务 器 对 象 的 一 种 方 法。 例 如， 上 面 介 绍 的Music 对 象 的 例 子， 处 理 是 通 过 将Music 对 象 作 为 远 程 对 象 装 载， 而 不 是 使 用 对 象 传 递 实 现 的。 只 有CORBA 支 持 这 种 方 法。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 对 象 传 递 允 许 程 序 员 减 少 通 信， 因 为 对 象 被 拷 贝 到 了 客 户 机 上。 远 程 对 象 更 适 合 用 于 需 要 直 接 利 用 服 务 器CPU 资 源 或 服 务 器 数 据 资 源 的 情 况。 从 数 据 一 致 性 的 观 点 来 说， 当 客 户 机 只 需 要 对 象 的 一 些 属 性， 而 不 是 整 个 对 象 时， 更 适 合 用 远 程 对 象。 在 服 务 器 对 象 属 性 总 由 服 务 器 处 理 来 修 改 的 模 型 中， 也 更 适 合 用 远 程 对 象。
<h3> 作 为 面 向 对 象 方 法 学 的 一 环</h3>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 分 布 目 标 清 楚 的 设 计 应 该 用 面 向 对 象 的 分 析 无 缝 地 实 现。 将 来， 网 络 分 布 式 对 象 模 型 可 能 会 成 为 面 向 对 象 方 法 学 中 开 发 过 程 的 一 环。 在 由 作 者 开 发 的 面 向 对 象 方 法 学“Drop” 中（http://www.njk.co.jp/otg/）， 这 类 环 境 通 过 使 用 在 对 象 分 析 中 称 为“ 重 用 基 础 模 型” 的 对 象 分 类 方 法 来 实 现。 重 用 基 础 模 型 是 一 种 分 类 方 法， 将 需 求 分 析 阶 段 的 对 象 分 成 不 同 的 角 色， 如View（ 视 图）、Process（ 处 理） 和Data（ 数 据 管 理）。 并 且 分 清 重 用 范 围， 如Generic（ 通 用）、Addparts（ 系 统 公 用） 和App（ 应 用 程 序 专 用）， 这 种 模 式 可 用 来 对 需 求 分 析 阶 段 的 对 象 分 类， 并 且 转 换 为 无 缝 的 分 布 式 对 象 设 计。

<h3> 用CORBA 设 计</h3>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 这 部 分 介 绍 一 个Music 类 的 例 子， 它 是CORBA 设 计 的。CORBA 使 用 远 程 对 象 来 装 载Music 对 象。 在 此 情 况 下， 当 客 户 机 调 用Music 对 象 的 参 考( 在CORBA 中 为 代 理 对 象) 的play() 方 法 时，play() 方 法 由 服 务 器 运 行。 这 是 不 方 便 的。 实 际 上，Music 类 的play() 方 法 必 须 修 改 为 命 名 为getMusicData() 的 方 法。Music 的 数 据 结 构（ 而 不 是 对 象） 必 须 传 递 到 客 户 机 上。 客 户 机 必 须 创 建 一 个 新 的Player 类。 使 用Player 对 象 来 修 改 使 用Music 数 据 的 设 计。 换 句 话 说，play() 方 法 不 能 进 入 到 分 布 在 服 务 器 的 对 象 中（ 参 看 图12）

<P><center>
<img src="Pics/9801-5-12.gif"><P>
 图12： 将 音 乐 数 据 传 给 播 放 器</center><p>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 在 此 例 子 中，Music 类 变 成 了 一 个 数 据 管 理 数 据 对 象，Player 类 变 成 了 一 个 播 放 处 理。 换 句 话 说“Drop” 不 提 倡 将 称 为play() 的 播 放 处 理 指 派 给Music 数 据 管 理 对 象 的 设 计。（ 在 本 文 中， 我 们 将play() 指 派 给Music， 以 简 化 说 明。）
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 通 过 在 分 析 的 开 始 便 将 数 据 管 理 数 据 和 数 据 操 作 过 程 分 开， 以 及 集 中 于 数 据 管 理 对 象， 我 们 能 解 决 因 为 分 布 式 对 象 产 品 的 差 别 而 不 得 不 修 改 设 计 方 法 的 问 题。 同 时 我 们 能 将 调 用 方 法 排 除 在 基 本 问 题 的 分 析 阶 段。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 去 年， 作 者 所 属 的 开 发 组 使 用 了“Drop” 开 发 过 程 开 发 了 一 个 航 空 订 票 系 统。 在 系 统 活 动 期 间， 通 过 使 用 称 为“concept” 的 概 念， 同 时 执 行 中 间 软 件 认 证 和 网 络 框 架 检 查， 转 变 了 分 布 式 对 象 或 数 据 库 的 调 用 方 法。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 现 在， 这 个 开 发 组 通 过 讨 论 会 和Web 站 点， 将 航 空 系 统 用 来 介 绍 基 于 分 布 式 对 象 的 网 络 系 统 的 设 计。 今 年， 我 们 计 划 用 讨 论 会 来 培 训 将 来 支 持 软 件 业 务 的 学 员。

<h3> 分 布 式 对 象 编 程 的 目 标</h3>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 分 布 式 对 象 编 程 的 目 标 是 将 基 于 单 机 的 面 向 对 象 机 制 扩 展 到 网 络， 实 现 此 目 标 可 以 归 结 为 以 下 三 个 技 术 概 念：
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
1. 网 络 透 明 的 面 向 对 象 操 作 － 允 许 用 正 常 的 面 向 对 象 编 程 方 法 操 作 对 象。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
2. 对 象 位 置 透 明 性 － 提 供 一 个 隐 藏 网 络 上 对 象 位 置( 服 务 器) 的 机 制。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
3. 语 言 独 立、ORB 产 品 独 立 的 环 境 - 提 供 一 个 不 依 赖 于 特 定 语 言 和 产 品 的 环 境。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 第 一 个 概 念， 网 络 透 明 的 面 向 对 象 操 作 是HORB 大 力 提 倡 的。 然 而，HORB 不 支 持 上 面 的 概 念2 或3 － 对 象 位 置 的 透 明 性 和 语 言 独 立、ORB 产 品 独 立 的 环 境。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
HORB 概 念 将 分 布 式 对 象 当 作 面 向 对 象 的 扩 充。RMI 也 不 支 持 概 念2 或3， 然 而RMI 概 念 接 近 于CORBA 对 象 模 型， 似 乎 与HORB 一 样 也 强 调 以 上 所 列 的 第 一 个 概 念。 另 一 方 面，CORBA 大 力 提 倡 概 念2 和3 。 自1990 年 以 来， 对 象 管 理 集 团（OMG） 一 直 在 发 展CORBA， 使 之 成 为 分 布 式 对 象 编 程 的 全 球 标 准。 当 前 的CORBA 版 本 为2.0。 一 个 称 为Java IDL（ 接 口 定 义 语 言）、 符 合CORBA 的ORB 捆 绑 在JDK 1.1 中。CORBA 概 念， 例 如 开 放 软 件 基 金 会（OSF） 的 远 程 过 程 调 用（RPC） 和 分 布 式 计 算 环 境（DCE）， 将 分 布 式 对 象 看 作 是 网 络 计 算 的 扩 充。 因 此，CORBA 重 点 在 于 技 术 概 念2 和3， 它 们 面 向 大 规 模 的、 分 布 的 网 络 系 统。 然 而， 仍 不 能 说CORBA 已 实 现 了“ 网 络 透 明 对 象 操 作” 的 目 标。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 例 如， 我 们 看 看CORBA 的 公 用 语 言-IDL。 必 须 用 此 语 言 声 明 远 程 消 息。IDL 是 一 个 重 要 的 框 架， 允 许 在 包 括 不 同 的ORB 和 语 言 的 环 境 中 进 行 协 同 对 象 操 作。 然 而， 使 用IDL 类 似 于 开 发 一 个 名 为Esperanto 的 语 言 的 概 念， 它 允 许 全 球 的 每 一 个 人 用 一 种 公 用 语 言 交 谈。 使 用 一 种 公 用 语 言 可 能 会 导 致 一 个 国 家 成 熟 的 发 展 减 弱（ 例 如 一 种 语 言 成 熟 的 面 向 对 象 功 能）。 而 且， 如 果ORB 开 发 商 完 全 实 现CORBA 大 部 分 的 规 范， 将 面 临 无 穷 无 尽 的 工 作。
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 虽 然， 每 一 个 分 布 式 对 象 工 具 有 不 同 的 结 构， 但 是 下 一 代 分 布 式 对 象 应 用 程 序 可 能 会 以 很 好 地 平 衡 如 上 所 述 的 三 个 技 术 概 念 为 特 征。 为 实 现 这 一 步 的 工 作 已 经 开 始， 一 些CORBA 产 品 对 用 户 隐 藏IDL， 也 有 一 些 非CORBA 产 品 支 持CORBA 的Internet 交 互 对 象 请 求 代 理 协 议（IIOP）， 以 便 能 够 连 接CORBA。 虽 然 这 些 工 作 被 认 为 是 一 些 调 整， 但 是 它 们 可 能 是 产 生 下 一 代 分 布 式 对 象 产 品 的 开 发 过 程 不 可 分 割 的 部 分。

<h3> 结 论</h3>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 本 文 叙 述 了 基 于Java 的 分 布 式 对 象 技 术RMI 和HORB。 有 很 多 我 们 想 介 绍 的 功 能， 例 如RMI 和HORB 支 持 双 向 消 息 通 信 和HORB 支 持 的 异 步 通 信， 以 及 很 多 新 的 符 合CORBA 的、 基 于Java 的 分 布 式 对 象 产 品， 但 是 限 于 篇 幅， 我 们 就 到 这。 虽 然 分 布 式 对 象 编 程 并 不 难， 但 是 它 是 使 复 杂 网 络 应 用 程 序 易 于 理 解 的 领 先 技 术。
</td></tr></table>
</html>
</body>

