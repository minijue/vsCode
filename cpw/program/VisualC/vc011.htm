<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>巧用C语言构造几个对FOXBASE操作的函数众所周知</title>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
</head>

<body style="font-size: 9pt" background="../../res/back.JPG">

<table border="0" width="100%" style="font-size: 9pt">
  <tr>
    <td width="100%" align="center"><strong>巧用C语言构造几个对FOXBASE操作的函数</strong></td>
  </tr>
  <tr>
    <td width="100%" align="center">文/陈德安 录入/江湖小子</td>
  </tr>
  <tr>
    <td width="100%" align="center">1999.08.07</td>
  </tr>
  <tr>
    <td width="100%" align="center"></td>
  </tr>
</table>

<p>众所周知，计算机技术飞速发展，计算机语言层出不穷。但在基层一些单位的实际应用中，Foxbase仍不失为一种良好的数据库语言，它具有很强的数据处理能力，很容易建立起数据库和对数据进行处理及操作，而C语言具有较强的计算功能和作图能力，通过它们的混合编程，可取长补短，完成实用性很强的应用程序。<br>
由于很多参考资料对C程序如何读取Foxbase数据库中的数据均有介绍，在此，笔者略去。现从应用的角度出发，介绍如何编制函数来操纵数据库。<br>
利用C与Foxbase进行过混合编程的人都知道，C读取数据库时，不管库大小和如何复杂，其操作过程具有共性，因而可把它们编成库函数形式，进行调用即可。<br>
首先编一个头文件，设名为fox.h，用于定义一些操作中常用到的常数和外部变量，还有定义的一些函数。程序清单如下所列：<br>
＃define MAXFIELD 128 /＊ 记录字段的最大长度 ＊/<br>
unsigned long recordnum; /＊ 记录号 ＊/<br>
unsigned recordlen,structlen,fieldnum; /＊ 记录长，库结构长，字段数 ＊/<br>
FILE ＊fp;<br>
struct{<br>
char name[11]; /＊ 字段名 ＊/<br>
char type; /＊ 字段类型 ＊/<br>
int length; /＊ 字段长度 ＊/<br>
int decim; /＊ 小数位数 ＊/<br>
}field[MAXFIELD];<br>
union{<br>
long i; /＊ 存整型字段 ＊/<br>
double f; /＊存实型字段 ＊/<br>
char s[255]; /＊ 存字符型字段 ＊/<br>
}f_value[MAXFIELD];<br>
void clear();<br>
void get_head();<br>
void go();<br>
void duse();<br>
void readdata();<br>
void closedata();<br>
其中结构数组field[MAXFIELD]用来存放记录各字段的说明信息，这些信息包括：字段名，字段类型，字段长度，数值型字段数据的小数位数。联合数组f_value[MAXFIELD]用来存放记录中各字段的值，不同类型的成员将存放于同一区域内。在上述结构和联合中，都使用了Foxbase的参数最大值，这样可适用于任何规模的数据库结构。<br>
在头文件中，有六个库函数说明，它们分别是：<br>
void clear()，用来设置屏幕为图形方式，以便用来读取数据库后进行画图；<br>
void get_head()，用来读取数据库的结构信息，以便能找到数据库的数据；<br>
void go()，用来移动记录指针，以便读取相应记录；<br>
void duse()，用来打开数据库，以便得到其指针，以对该库进行存取操作；<br>
void readdata()，用来读取数据库的一个记录；<br>
void closedata()，用来关闭打开的数据库。<br>
函数清单如下：<br>
＃include <br>
void clear()<br>
{<br>
int graphdriver=DETECT;<br>
int graphmode;<br>
initgraph(＆graphdriver,＆graphmode,″″);<br>
}<br>
void get_head(FILE ＊fp)<br>
{<br>
unsigned char ch[9];<br>
int i;<br>
fseek(fp,41,0);<br>
fgets(ch,9,fp);<br>
recordnum=ch[0]＋256＊ch[1]＋4096＊ch[2]＋65535＊ch[3];<br>
recordlen=ch[6]＋256＊ch[7];<br>
structlen=ch[4]＋256＊ch[5];<br>
fieldnum=(structlen－32－1)/32;<br>
for(i=0;i {<br>
fseek(fp,(i＋1)＊32,0);<br>
fgets(field[i].name,11,fp);<br>
fseek(fp,(i＋1)＊32＋11,0);<br>
field[i].type=fgetc(fp);<br>
fseek(fp,(i＋1)＊32＋16,0);<br>
ch[0]=fgetc(fp);<br>
field[i].lengh=ch[0];<br>
fseek(fp,(i＋1)＊32＋17,0);<br>
fgets(ch,2,fp);<br>
field[i].decim=ch[0];}<br>
}<br>
void go(FILE＊fp,unsigned long i)<br>
<br>
if(fp==NULL)<br>
{<br>
printf(″文件不能打开\n″);<br>
getch();<br>
return;}<br>
fseek(fp,structlen＋(i－1)＊recordlen,0);}<br>
void duse(char＊filename)<br>
{<br>
if((fp=fopen(filename,″rwb″))==NULL)<br>
{<br>
printf(″文件不能打开\n″);<br>
getch();<br>
exit(1);}<br>
void readdata(FILE ＊fp,unsigned long rnum)<br>
{<br>
int j;<br>
unsigned lim;<br>
char ch;<br>
double ftemp;<br>
if (rnum&gt;recordnum)<br>
{<br>
printf(″参数错误\n″);<br>
getch();<br>
return;}<br>
go (fp,rnum);<br>
ch=fget(fp);<br>
if(ch==″＊″)<br>
{<br>
printf(″记录已经被删除\n″);<br>
return;}<br>
printf(″fieldnum=％d\n″,fieldnum);<br>
j=0;<br>
lim=fieldnum;<br>
while(j {<br>
fgets(f_value[j].s,field[j].lengh＋1,fp);<br>
if(field[j].type==″N″)<br>
{<br>
ftemp=atof(f_value[j].s);<br>
if(field[j].decim&gt;0)<br>
{f_value[j].f=ftemp;}<br>
else<br>
f_value[j].i=ftemp;}<br>
j＋＋;<br>
}}<br>
void closedata(FILE ＊fp)<br>
{<br>
if (fclose(fp))<br>
printf(″数据库关闭错误\n″);<br>
exit(1);<br>
}<br>
以上程序在Turbo c＋＋ 3.0上调试通过。<br>
</p>
</body>
</html>
