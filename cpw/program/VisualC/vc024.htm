<html>

<head>
<meta http-equiv="Content-Type" content="text/html;" charset="gb2312">
<title> 如何在VC5中控制工具条的停靠位置 </title>
</head>

<body>
<div align="center"><center>

<table border="0" cellspacing="2" cellpadding="0" width="95%" style="font-size: 9pt">
  <tr bgcolor="#CCFFCC">
    <td><span style="font-size: 9pt">现在的位置是： <b><a href="../progidx.htm">编程技巧</a>--&gt;<a
    href="Vcidx098.htm">Visual C++/C++</a>--&gt;</b> </span>如何在VC5中控制工具条的停靠位置</td>
  </tr>
  <tr>
    <td></td>
  </tr>
</table>
</center></div><div align="center"><center>

<table border="1" width="95%" style="font-size: 9pt" bgcolor="#E8E8E8"
bordercolor="#C48C59" cellpadding="2">
  <tr>
    <td width="100%"><table border="1" width="32%" style="font-size: 9pt" height="30"
    cellspacing="0" cellpadding="2">
      <tr>
        <td width="100%" bgcolor="#4264B5"><p align="center"><font color="#FFFFFF">资料整理<span
        class="f">&middot;</span><a href="http://fasoft.yeah.net" target="_blank"
        style="color: rgb(255,255,255)">中国程序员网站</a></font></td>
      </tr>
    </table>
    </td>
  </tr>
  <tr>
    <td width="100%">　<p align="center"><b>如何在VC5中控制工具条的停靠位置</b></p>
    <p align="center">宋立波</p>
    <p>　　在VC5 
    中开发大型应用程序时，工具条通常是程序中必不可少的重要功能因素，其中工具条在整个窗口中的停靠位置尤其关键，它直接影响到程序界面的外观形象。下面针对笔者实际开发中各类工具条停靠位置的控制过程，详细阐述其实现技巧。<br>
    　　一、标准工具条停靠位置的控制<br>
    　　VC5 
    应用程序向导生成的框架代码中，都具有普通工具条的控制方法。正常情况下工具条类CToolBar是控制条类CControlBar 
    的派生类，其显示的初始停靠位置是通过调用继承的函数CControlBar::EnableDocking(DWORD 
    dwStyle)来确定的，其参数dwStyle用来指定停靠具体位置，与本文有关的风格如下(其余请参阅VC5的联机文档)：<br>
    　　CBRS_ALIGN_TOP 停靠在框架窗口客户区域顶部<br>
    　　CBRS_ALIGN_BOTTOM 停靠在框架窗口客户区域底部<br>
    　　CBRS_ALIGN_LEFT 停靠在框架窗口客户区域左边<br>
    　　CBRS_ALIGN_RIGHT 停靠在框架窗口客户区域右边<br>
    　　CBRS_ALIGN_ANY 停靠在框架窗口客户区域任何位置<br>
    　　在利用应用程序向导AppWizard 
    生成的应用程序中，其控制代码默认的停靠位置控制风格为CBRS_ALIGN_ANY，即允许停靠在框架窗口客户区域的任何边上。工具条在正常显示时为停靠在窗口客户区域的顶部，控制指令为EnableDocking(CBRS_ALIGN_ANY)或m_wndToolBar<br>
    　　。EnableDocking(CBRS_ALIGN_ANY) 
    ，注意，在实际程序控制时前者必须处于所有其它控制代码的前面，否则浮动工具条或特殊工具条等部分代码可能无法奏效。具体控制方法请参考利用应用程序向导生成的任何一个程序实例的框架代码部分中的建立函数ONCREATE()。<br>
    　　应用程序的单文档和多文档的窗口框架类均为CFrameWnd 
    的派生类，其指定工具条的停靠位置均是通过调用继承的函数 
    CFrameWnd::EnableDocking(DWORD dwDockStyle)来实现的，其可选的参数除上述五种之外，还增加了CBRS_FLOAT_MULTI参数，这个参数主要是为设计浮动工具条而增加的，其用来确定一个框架窗口中允许存在多个浮动工具条。同样，利用应用程序向导AppWizard 
    生成的应用程序，其默认的停靠位置也是CBRS_ALIGN_ANY，即允许工具条停靠在框架窗口的任何边上，其默认的初始位置为框架窗口的顶部，即为EnableDocking(CBRS_ALIGN_ANY)或m_wndToolBar.EnableDocking(CBRS_ALIGN_ANY)。<br>
    　　二、浮动工具条停靠位置的控制<br>
    　　如果在一个框架窗口中存在多个标准或浮动工具条时，需要利用函数void 
    DockControlBar(CControlBar ＊pBar,UINT nDockBarID=0,LPCRECT lpRect= NULL)来确定要控制停靠位置的工具条，它也是CFrameWnd类的成员函数，其中参数pBar用来指向被控制停靠位置的工具条对象指针，参数nDockBarID用来确定工具条停靠在框架窗口的哪条边上，其控制风格的具体取值为：<br>
    　　AFX_IDW_DOCKBAR_TOP 停靠在框架窗口的顶部<br>
    　　AFX_IDW_DOCKBAR_BOTTOM 停靠在框架窗口的底部<br>
    　　AFX_IDW_DOCKBAR_LEFT 停靠在框架窗口的左边<br>
    　　AFX_IDW_DOCKBAR_RIGHT 停靠在框架窗口的右边<br>
    　　当参数nDockBarID的取值为0时，则工具条可以停靠在框架窗口中的任何一个可停靠的边上，其默认的初始位置为窗口顶部。<br>
    　　三、并列工具条停靠位置的控制<br>
    　　很多大型应用程序中都存在这样的工具条，将多个工具条同时并列停靠在某窗口的某一条边上。对于这种停靠方法，利用上述工具条控制函数DockControlBar的lpRect参数，通过控制工具条的停靠矩形区域的方法可以实现。如笔者实现的函数如下：<br>
    　　（一）在实现文件MainFrm.h中增加如下成员函数定义<br>
    　　void DockControlBarLeftOf(CToolBar＊ Bar,CToolBar＊ LeftOf);<br>
    　　（二）在实现文件MainFrm.cpp中增加如下成员函数<br>
    　　void CMainFrame::DockControlBarLeftOf(CToolBar＊ Bar,CToolBar＊ LeftOf)<br>
    　　 { //设置工具条并列停靠在同一条边上<br>
    　　 CRect rect; //矩形区域定义<br>
    　　 DWORD dw;<br>
    　　 UINT n=0;<br>
    　　 RecalcLayout();//重新显示<br>
    　　 LeftOf－&gt;GetWindowRect(＆rect);<br>
    　　 rect.OffsetRect(1,0);//设置偏移值以停靠在同一边上<br>
    　　 dw=LeftOf－&gt;GetBarStyle();<br>
    　　 n=(dw＆CBRS_ALIGN_TOP)?AFX_IDW_DOCKBAR_TOP:n;<br>
    　　 n=(dw＆CBRS_ALIGN_BOTTOM＆＆n==0)?AFX_IDW_DOCKBAR_BOTTOM:n;<br>
    　　 n=(dw＆CBRS_ALIGN_LEFT＆＆n==0)?AFX_IDW_DOCKBAR_LEFT:n;<br>
    　　 n=(dw＆CBRS_ALIGN_RIGHT＆＆n==0)?AFX_IDW_DOCKBAR_RIGHT:n;<br>
    　　 DockControlBar(Bar,n,＆rect);<br>
    　　 }<br>
    　　在这个函数中应注意对RecalcLayout()函数和OffsetRect()函数的调用，前一个函数用来重新显示被调整的客户区和工具条，后一个函数用来重新确定矩形区域，这相当于利用鼠标将第二个工具条窗口拖动到前一个工具条上然后释放。<br>
    　　（三）修改应用程序建立函数OnCreate()中的相应DockControlBar()函数为DoctControlBarOf()函数，并正确设置工具条对象的指针，如笔者实现程序中的控制代码如下：<br>
    　　EnableDocking(CBRS_ALIGN_ANY);//停靠位置必须在最前面<br>
    　　 ......//工具条建立函数<br>
    　　 m_wndToolBar.EnableDocking(CBRS_ALIGN_ANY);<br>
    　　 m_wndTestToolBar.EnableDocking(CBRS_ALIGN_ANY);<br>
    　　 DockControlBar(＆m_wndToolBar,AFX_IDW_DOCKBAR_TOP);<br>
    　　 //使两个工具条并列停靠<br>
    　　 DockControlBarLeftOf(＆m_wndTestToolBar,＆m_wndToolBar);<br>
    　　四、工具条顶部停靠位置的控制<br>
    　　工具条的最后一种停靠位置控制方法是，如何控制定制工具条的停靠位置，如具有通用控制功能工具条的停靠位置等。这主要实现左右两侧定制工具条与顶部工具条之间谁靠近框架窗口边的位置关系。如笔者实现程序中的控制步骤如下：<br>
    　　（一）打开菜单资源增加顶部位置控制菜单项IDD_DLGBARTOP；<br>
    　　（二）在实现文件MainFrm.h中增加成员控制变量m_bDialogTop；<br>
    　　 BOOL m_bDialogTop;<br>
    　　 并在构造函数中为其设置初始值；<br>
    　　（三）利用类向导ClassWizard为菜单项设置响应函数；<br>
    　　（四）在实现文件MainFrm.cpp中通过充分利用SetWindowPos( )成员完善消息映射功能。<br>
    　　 void CMainFrame::OnButtonDlgbartop()<br>
    　　 { //定制工具条顶部位置控制函数<br>
    　　 if (m_bDialogTop) m_wndDlgBar.SetWindowPos(<br>
    　　 ＆m_wndStatusBar,0,0,0,0,SWP_NOSIZE|SWP_NOMOVE);<br>
    　　 //顶部工具条停靠在窗口边，左右工具条停靠其下<br>
    　　 else m_wndDlgBar.SetWindowPos(＆wndTop,0,0,0,0,<br>
    　　 SWP_NOSIZE|SWP_NOMOVE);//停靠在最顶部<br>
    　　 RecalcLayout(); //重新显示窗口<br>
    　　 m_bDialogTop=!m_bDialogTop;//改变变量标志<br>
    　　 }<br>
    　　 void CMainFrame::OnUpdateButtonDlgbartop(CCmdUI＊ pCmdUI)<br>
    　　 { //设置菜单项检查状态更新函数<br>
    　　 pCmdUI－&gt;SetCheck(m_bDialogTop);<br>
    　　 }<br>
    　　这样，就可以利用菜单项来控制定制工具条的顶部停靠位置。<br>
    </td>
  </tr>
</table>
</center></div><a href="3-b.htm">

<p></a>　</p>
</body>
</html>
