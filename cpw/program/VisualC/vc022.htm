<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>New Page 2</title>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
</head>

<body>

<table border="0" cellspacing="2" cellpadding="0" width="100%" style="font-size: 9pt">
  <tr bgcolor="#CCFFCC">
    <td><span style="font-size: 9pt">现在的位置是： <b><a href="Vc_idx.htm">Visual 
    C++/C++</a> &gt;</b> </span>利用C++ Builder进行精确计时</td>
  </tr>
  <tr>
    <td></td>
  </tr>
</table>

<table border="0" width="100%" style="font-size: 9pt" bgcolor="#E8E8E8">
  <tr>
    <td width="100%"><table border="1" width="32%" style="font-size: 9pt" height="30"
    cellspacing="0" cellpadding="2">
      <tr>
        <td width="100%" bgcolor="#4264B5"><p align="center"><font color="#FFFFFF">资料整理<span
        class="f">&middot;</span><a href="http://fasoft.yeah.net" target="_blank"
        style="color: rgb(255,255,255)">中国程序员网站</a></font></td>
      </tr>
    </table>
    </td>
  </tr>
  <tr>
    <td width="100%">　<table border="0" width="100%" bgcolor="#E8E8E8">
      <tr>
        <td width="100%"></td>
      </tr>
    </table>
    </td>
  </tr>
  <tr>
    <td width="100%"><p align="center"><strong>利用C++ Builder进行精确计时</strong></td>
  </tr>
  <tr>
    <td width="100%"></td>
  </tr>
  <tr>
    <td width="100%">&nbsp;&nbsp;&nbsp; 虽然Win95下可视化开发工具如VC、Delphi、C＋＋ 
    Builder等都有专用的定时器控件Timer，而且使用很方便，可以实现一定的定时功能，但最小计时精度仅为55ms，且定时器消息在多任务操作系统中的优先级很低，不能得到及时响应，往往不能满足实时控制环境下的应用。不过Microsoft公司在Win32 
    API函数库中已经为用户提供了一组用于高精度计时的底层函数，如果用户使用得当，计时精度可到1ms。这个计时精度、对于一般的实时系统控制完全可以满足要求。现将由C＋＋ 
    Builder 4.0提供的重新封装后的一组与时间相关的主要接口函数（函数名、参数、功能与Win32 
    API基本相同）说明如下： <br>
    <br>
    　　1．DWORD timeGetTime(void) <br>
    　　返回从Windows启动开始经过的毫秒数。最大值为232，约49.71<br>
    天。 <br>
    　　2．MMRESULT timeSetEvent( <br>
    　　UINT uDelay, <br>
    　　UINT uResolution, <br>
    　　LPTIMECALLBACK lpTimeProc, <br>
    　　DWORD dwUser, <br>
    　　UINT fuEvent <br>
    　　 ) <br>
    <br>
    　　该函数设置一个定时回调事件，此事件可以是一个一次性事件或周期性事件。事件一旦被激活，便调用指定的回调函数，成功后返回事件的标识符代码，否则返回NULL。参数说明如下：<br>
    <br>
    　　uDelay：以毫秒指定事件的周期。 <br>
    　　UResolution：以毫秒指定延时的精度，数值越小定时器事件分辨率越高。缺省值为1ms。 
    <br>
    　　LpTimeProc：指向一个回调函数。 <br>
    　　DwUser：存放用户提供的回调数据。 <br>
    　　FuEvent：指定定时器事件类型： <br>
    　　TIME_ONESHOT：uDelay毫秒后只产生一次事件 <br>
    　　TIME_PERIODIC ：每隔uDelay毫秒周期性地产生事件。 <br>
    <br>
    　　3．MMRESULT timeKillEvent(UINT uTimerID) <br>
    　　该函数取消一个指定的定时器回调事件。uTimerID标识要取消的事件（由timeSetEvent函数返回的标识符）。如果成功则返回TIMERR_NOERROR，如果定时器时间不存在则返回MMSYSERR_INVALPARAM。 
    <br>
    　　void CALLBACK TimeProc( <br>
    　　UINT uID, <br>
    　　UINT uMsg, <br>
    　　DWORD dwUser, <br>
    　　DWORD dw1, <br>
    　　DWORD dw2 <br>
    　　 ); <br>
    <br>
    　　该函数是一个应用程序定义的回调函数，出现定时器事件时该函数被调用。TimeProc是应用程序定义的函数名的占位符。使用该函数<br>
    时要注意的是，它只能调用以下有限的几组API函数：PostMessage，timeGetSystemTime， 
    timeGetTime， timeSetEvent，timeKillEvent<br>
    ，midiOutShortMsg, midiOutLongMsg，OutputDebugString。同时也不要使用完成时间很长的API函数，程序尽可能简短。 
    <br>
    <br>
    　　使用以上一组函数就可以完成毫秒级精度的计时和控制（在C++Builder中使用时要将头文件mmsystem.h加到程序中）。由于将定时控<br>
    制精确到几毫秒，定时器事件将占用大量的CPU时间和系统资源，所以在满足控制要求的前提下，应尽量将参数uResolution的数值增大。而<br>
    且定时器实时控制功能完成后要尽快释放。<p>　</td>
  </tr>
</table>
</body>
</html>
