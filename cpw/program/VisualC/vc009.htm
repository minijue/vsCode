<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>动态改变CMOS密码的方法</title>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
</head>

<body background="../../res/back.JPG">

<table border="0" width="100%" style="font-size: 9pt" height="422">
  <tr>
    <td width="100%" align="center" height="14"><strong>动态改变CMOS密码的方法</strong></td>
  </tr>
  <tr>
    <td width="100%" align="center" height="14">文/安徽 张田园 录入:江湖小子</td>
  </tr>
  <tr>
    <td width="100%" align="center" height="5">1999年8月7日</td>
  </tr>
  <tr>
    <td width="100%" align="center" height="5"></td>
  </tr>
  <tr>
    <td width="100%" align="center" height="26"><p align="left"> 
    &nbsp;&nbsp;&nbsp; 现代微机的CMOS设置中均有密码，但单一的密码可能被旁人偷看，例如公共机房的超级用户专用机等。那么CMOS的密码能否动态改变?这样较为保险,经过思考,想出了一种方法,思路如下:</td>
  </tr>
  <tr>
    <td width="100%" align="center" height="38"><p align="left"> 
    &nbsp;&nbsp;&nbsp; 微机中的CMOS信息是可以更改的,因此我们可以编制类似的程序,将CMOS中的信息读出保存,需要时从磁盘文件上恢复.一般来说,CMOS主体信息长度为64字节,其中包括各种计算机参数和CMOS密码,其索引端口号为70H,数据端口号为71H,有些资料上介绍开机状态下清除CMOS密码用的下面的两条DEBUG指令:</td>
  </tr>
  <tr>
    <td width="100%" align="center" height="14"><p align="left">&nbsp;&nbsp;&nbsp; -O 70,23</td>
  </tr>
  <tr>
    <td width="100%" align="center" height="14"><p align="left">&nbsp;&nbsp;&nbsp; -O 70,34</td>
  </tr>
  <tr>
    <td width="100%" align="left" height="62">&nbsp;&nbsp;&nbsp; 其中23和34为随机数,这种方法清除CMOS的原理是改写CMOS的第23H字节的内容为34H,只要原CMOS第23H字节的内容不是34H,就会导致计算机在启动时CMOS数据校验通不过而使CMOS数据失效,所以在一般情况下,我们不能直接修改CMOS中的数据.但是我们如果修改后使其通过校验的话,则也可以使其内容满足我们的需要,但一般人对其数据校验原理并不知情,我们可否用其它的方法来间接实现呢?可以,本人实现的方法就是保存数次CMOS的设置,然后根据需要将其从磁盘上恢复到CMOS上去.下面是用TC 
    2.0实现的将CMOS读出保存为磁盘文件CDDATA.DAT的程序:</td>
  </tr>
  <tr>
    <td width="100%" align="left" height="80">#include &lt;dos.h&gt;<br>
    #include &lt;stdio.h&gt;<br>
    #include &lt;stdlib.h&gt;<br>
    main()<br>
    {<br>
    FILE *fp;<br>
    int indexport=0x70,dataport=0x71,i;<br>
    char data[256]; /*此程序读出256字节*/<br>
    fp=fopen(&quot;c:\\cdata.dat&quot;,&quot;wb&quot;);<br>
    for (i=0;i&lt;256;i++)<br>
    {outportb(indexport,i); /*定位数据端口*/<br>
    data[i]=inportb(dataport);/*从端口读字节*/<br>
    }<br>
    fwrite(data,1,256,fp);/*写字节到文件*/<br>
    fclose(fp);<br>
    }</td>
  </tr>
  <tr>
    <td width="100%" align="left" height="14">&nbsp;&nbsp;&nbsp; 上述的程序将当前的CMOS数据读出并保存.根据此原理,我们可以在CMOS中分别设置三次密码,每次保存为一个文件,三个文件分别取名,如:cdata01.dat,cdata02.dat,cdata03.dat,如保存的CMOS密码分别为&quot;111&quot;,&quot;222&quot;,&quot;333&quot;,然后随机的从磁盘文件读出写入CMOS中,开机时就不定是哪一个密码了,最多试三次就可解密,但旁人无法知其奥妙,就不好将密码试出来了.从文件将密码读出的程序如下:</td>
  </tr>
  <tr>
    <td width="100%" align="left" height="14">#include &lt;dos.h&gt;<br>
    #include &lt;stdio.h&gt;<br>
    #include &lt;stdlib.h&gt;<br>
    #include &lt;time.h&gt;<br>
    char 
    *filename[]={&quot;c:\\cdata01.dat&quot;,&quot;c:\\cdata02.dat&quot;,&quot;c:\\cdata03.dat&quot;};<br>
    main()<br>
    {<br>
    FILE *fp;<br>
    int indexport=0x70,dataport=0x71,i;<br>
    char data[256],num;<br>
    num=random(3);<br>
    fp=fopen(filename[num],&quot;rb&quot;);/*随机取三个文件名*/<br>
    fread(data,1,256,fp);<br>
    for (i=0;i&lt;256;i++)<br>
    {outportb(indexport,i); /*定位数据端口*/<br>
    outportb(dataport,data[i]);<br>
    }<br>
    fclose(fp);<br>
    }</td>
  </tr>
  <tr>
    <td width="100%" align="center" height="14"><p align="left"> 
    &nbsp;&nbsp;&nbsp; 将此文件编译后加在自动批处理文件中,每次启动后,自动恢复三个密码中的一个,实现了CMOS动态密码.在以上的思路中,可以编程控制密码根据某种情况具体变化,就看你怎么想了.</td>
  </tr>
</table>
</body>
</html>
