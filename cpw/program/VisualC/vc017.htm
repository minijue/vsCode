<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>用C++ Builder3 制作NotePad（记事本）续篇</title>
<link rel="stylesheet" href="my.css"
tppabs="http://person.zj.cninfo.net/~lifu/images/my.css">
</head>

<body style="font-size: 9pt" bgcolor="#FFFFFF">

<table border="0" cellspacing="2" cellpadding="0" bordercolor="#DED8CD" width="100%">
  <tr bgcolor="#CCFFCC">
    <td><span style="font-size: 9pt">现在的位置是：<a href="Vc_idx.htm">Visual C++/C++</a> 
    <b>&gt;</b> 用C++ Builder3 制作NotePad（记事本）续篇</span></td>
  </tr>
  <tr>
    <td><span style="font-size: 9pt"></span></td>
  </tr>
</table>

<table border="0" width="100%" style="font-size: 9pt" bgcolor="#E8E8E8">
  <tr>
    <td width="100%"><table border="1" width="32%" style="font-size: 9pt" height="30"
    cellspacing="0" cellpadding="2">
      <tr>
        <td width="100%" bgcolor="#4264B5"><p align="center"><font color="#FFFFFF">资料整理<span
        class="f">&middot;</span><a href="http://fasoft.yeah.net" target="_blank"
        style="color: rgb(255,255,255)">中国程序员网站</a></font></td>
      </tr>
    </table>
    </td>
  </tr>
  <tr>
    <td width="100%">　<table border="0" width="100%">
      <tr>
        <td width="100%"></td>
      </tr>
    </table>
    </td>
  </tr>
  <tr>
    <td width="100%"><p align="center"><span style="font-size: 9pt"><strong><font
    color="#000000">用C++ Builder3 制作NotePad（记事本）续篇</font></strong></span></td>
  </tr>
  <tr>
    <td width="100%"></td>
  </tr>
  <tr>
    <td>上回说到“我的记事本”小功告成，copy给朋友一份，咦，不能用，说是缺文件？噢，像VB的VBRUN???<br>
    .dll一样，C++ Builder3编译的程序也需要运行库的支持的。找到并打开它看看我们还有些什么没有做？首先是关于菜单的快捷键问题。如果你是使用我上次所给的资源脚本导人的菜单，你会发现带有快捷键的菜单项的文字都像“撒消(U)\tCtrl+Z”一样。以前用BC的资源编辑器做过菜单的朋友都知道，“\t”表示右对齐，而在C++ 
    Builder3中也作为菜单的文字了。另外C++ Builder3中的快捷键的建立也简单的多，快捷键已经作为菜单的ShortCut属性了。这里，仅改动“编辑(E)”中的“撒消(U)Ctrl+Z”项来示众，其余皆可依样而画葫芦之。<br>
    &nbsp;&nbsp; 先双击MainMenu1菜单组件，进入菜单编辑器，选中“编辑(E)”中的“撤消(U)Ctrl+Z”项。接着将Caption属性改为“撤消(U)”（即把“\tCtrl+Z”删去），并在shortCut瞩性中选择Ctrl+Z。这样，该项的快捷键就设完了。接着是编辑菜单里的各个项。首先是“撤消(&amp;U)Ctrl+Z”到“全部选定(&amp;A)”六项（必须先将他们的Enabled属性都设为true)，C++ 
    Builder3为这些功能提供了现成的方法（Method）。比如“撤消(&amp;U)Ctral+Z”菜单，可以使用Undo方法，即在该菜单的OnClick事件处理函数中输入“Memo1-&gt;Undo();”。同理有：<br>
    &nbsp;&nbsp;&nbsp; “剪切(&amp;T)\tCtrl+X”项，输入：“Memo1-&gt;CutToClipboard();”<br>
    &nbsp;&nbsp;&nbsp; “复制(&amp;C)\tCtrl+C”项，输入：“Memo1-&gt;CopyToClipboard();”<br>
    &nbsp;&nbsp;&nbsp; “粘贴(&amp;P)\tCtrl+V”项，输入：“Memo1-&gt;PasteFromClipboard();”<br>
    &nbsp;&nbsp;&nbsp; “删除(&amp;L)\tDel”项，输入：“Memo1-&gt;ClearSelection();”<br>
    &nbsp;&nbsp;&nbsp; “全部选定(&amp;A)”项，输入：“Memo1-&gt;SelectAll();”<br>
    &nbsp;&nbsp; 下面是“时间/日期(&amp;D)F5”项，我们必须先取得当前的日期和时间。有两种方法，一种是用getdate和<br>
    gettime函数，一种是用C++ Builder3中的TDateTime类。这里选择后一种，但有时使用getdate和gettime函数会更简便。下面给出该菜单项的处理代码：<br>
    TDateTime * Current_DateTime =newTDateTime; //生成TDateTime对象<br>
    * Current_DateTime=Current_DateTime-&gt;CurrentDateTime(); //获取当前日期和时间<br>
    Memo1-&gt;SetselTextBuf(Current_DateTime-&gt;DateTimeString().c_str());//将当前日期和时间转换成字符串，并用SetSelTextBuf方法插入当前光标位置<br>
    &nbsp;&nbsp; 接着是处理‘自动换行(&amp;W)”的代码：<br>
    //W1是“自动换行(&amp;W)”菜单项的名字(Name)属性，如果你不是W1，请做相应的改动<br>
    if(W1-&gt;Checked) //该菜单已经检取（Checked）<br>
    {W1-&gt;Checked=false; //取消检取<br>
    Memo1-&gt;ScrollBars=ssBoth; //Memo1两根滚动条都要<br>
    } else<br>
    { W1-&gt;Checked=true; //设置检取<br>
    Memo1-&gt;ScrollBars = ssVertical; //Memo1只设垂直滚动条，效果就是自动换行<br>
    }<br>
    &nbsp;&nbsp; 接下来处理“设置字体(&amp;F)...”菜单，我们首先需要一个设置字体的公用对话框。从Dialogs组件条中选FontDialog组件放入表单中。下面是处理“设置字体(&amp;F)...”的代码：<br>
    if(FontDialog1-&gt;Execute())Memo1-&gt;Font=FontDialog1-&gt;Font; <br>
    &nbsp;&nbsp; 至此，“编辑(E)”菜单的功能都处理完了，下面将是处理“搜索(S)”菜单的工作。其中，我们又将用到两个公用对话框。C++ 
    Builder3只提供了用来获取用户欲查我的字符串的对话框，并未提供具体查找的函数，所以我们得自己写处理函数。下面我给出修改的Win32 
    SDK的范例代码，你需要将这些代码插在程序的首部，即定义全局变量的地方。<br>
    typedef enum {<br>
    &nbsp;&nbsp;&nbsp; frtFind<br>
    &nbsp;&nbsp;&nbsp; frtReplace,<br>
    &nbsp;&nbsp;&nbsp; frtRepAll<br>
    } FRT<br>
    #define GETSEL(ichS,ichE) \ SendMessage(MainForm - &gt; Memo1 - &gt; Handle,<br>
    EM_GETSEL,(WPARAM) &amp; ichs, (LPARAM) &amp; ichE)<br>
    #define SETSEL(ichS,ichE) \SendMessage(MainForm - &gt; Memo1 - &gt; Handle,<br>
    EM_SETSEL, (WPARAM) ichS, (LPARAAM) ichE)<br>
    BOOL FWholeWord(char * sz, char * szStart, char * szEnd,<br>
    int cch) {<br>
    &nbsp;&nbsp;&nbsp; if ( sz! = szStart &amp; &amp;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * (sz - 1 ) ! = ' ' &amp; &amp;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * (sz - 1 ) ! = '\t' &amp; &amp;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * (sz - 1 ) ! = ',' &amp; &amp;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * (sz - 1 ) ! = '.' &amp; &amp;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * (sz - 1 ) ! = '\r'<br>
    &nbsp;&nbsp;&nbsp; ) { return FALSE;<br>
    &nbsp;&nbsp;&nbsp; }<br>
    &nbsp;&nbsp;&nbsp; if ( sz + cch! = szEnd &amp; &amp;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * (sz + cch) ! = ' ' &amp; &amp;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * (sz +cch) ! = '\t' &amp; &amp;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * (sz + cch) ! = ',' &amp; &amp;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * (sz + cch) ! = '.' &amp; &amp;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * (sz + cch) ! = '\r'<br>
    &nbsp;&nbsp;&nbsp; ) { return FALSE;<br>
    &nbsp;&nbsp;&nbsp; }<br>
    &nbsp;&nbsp;&nbsp; return TRUE;<br>
    }<br>
    BOOL Find(char * szFind, BOOL fDown, BOOL fMatchCase, BOOL fWholeWord, BOOL fNoScroll)<br>
    { char * szText;<br>
    &nbsp;&nbsp;&nbsp; UINT ichStart;<br>
    &nbsp;&nbsp;&nbsp; UINT ichEnd;<br>
    &nbsp;&nbsp;&nbsp; UINT cch;<br>
    &nbsp;&nbsp;&nbsp; int dch;<br>
    &nbsp;&nbsp;&nbsp; int dchComp;<br>
    &nbsp;&nbsp;&nbsp; char * szTerm;<br>
    &nbsp;&nbsp;&nbsp; char * sz;<br>
    &nbsp;&nbsp;&nbsp; UINT cchFind;<br>
    &nbsp;&nbsp;&nbsp; BOOL fFound = FALSE;<br>
    &nbsp;&nbsp;&nbsp; int dcbOnFind;<br>
    &nbsp;&nbsp;&nbsp; szText = MainForm - &gt; Memo1 - &gt; Lines - &gt; GetText();<br>
    &nbsp;&nbsp;&nbsp; cchFind = strlen (szFind);<br>
    &nbsp;&nbsp;&nbsp; GETSEL(ichStart, ichEnd);<br>
    &nbsp;&nbsp;&nbsp; cch = strlen(szText);<br>
    &nbsp;&nbsp;&nbsp; if (<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ichEnd - ichStart = = cchFind &amp; &amp;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; !strnicmp(szText + ichStart, szFind, cchFind)<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dchOnFind = 1;<br>
    &nbsp;&nbsp;&nbsp; else<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dchOnFind = 0;<br>
    &nbsp;&nbsp;&nbsp; if (fDown)<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { dch = 1;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dchComp = 0;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sz = szText + ichStart + dchOnFind;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; szTerm = szText + cch;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
    &nbsp;&nbsp;&nbsp; else<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { dch = -1;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dchComp = 1;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sz = szText + ichStart - dchOnFind;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; szTerm = szText;<br>
    &nbsp;&nbsp;&nbsp; }<br>
    &nbsp;&nbsp;&nbsp; for (; sz + dchComp! = szTerm; sz + = dch)<br>
    &nbsp;&nbsp;&nbsp; {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tolower(* sz) = = tolower( * szFind) &amp; 
    &amp;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (fMatchCase ?<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; !strncmp(sz, szFind, 
    cchFind) :<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; !strnicmp (sz, szFind, 
    cchFind)<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) &amp; &amp;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( !fWholeWord || FWholeWord(sz, szText, 
    szTerm,cchFind)))<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { SendMessage(MainForm -&gt; Memo1 -&gt; 
    Handle,EM_SETSEL, sz-szText, sz-szText + cchFind);<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!fNoScroll)<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SendMessage(MainForm - 
    &gt; Memo1 - &gt; Handle,EM_SCROLLCARET, 0, 0L);<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fFound = TRUE;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
    &nbsp;&nbsp;&nbsp; }<br>
    &nbsp;&nbsp;&nbsp; if ( !fNoScroll &amp; &amp; !fFound)<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MessageBox(NULL, szFind, &quot;字 符 串 没 
    有 找 到&quot;,MB_OK);<br>
    &nbsp;&nbsp;&nbsp; return fFound;<br>
    &nbsp;&nbsp;&nbsp; }<br>
    &nbsp;&nbsp;&nbsp; VOID Replace(char * szReplace) {SendMessage(MainForm - &gt; Memo1 - 
    &gt; Handle,<br>
    &nbsp;&nbsp;&nbsp; EM_REPLACESEL, 0, (LPARAM) (LPSTR) szReplace);<br>
    &nbsp;&nbsp;&nbsp; }<br>
    &nbsp;&nbsp;&nbsp; VOID ReplaceAll(char * szFind, char * szReplace, BOOLfMatchCase, BOOL 
    fWholeWord)<br>
    &nbsp;&nbsp;&nbsp; { UINT ichStart;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UINT ichEnd;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GETSEL(ichStart, ichEnd);<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SETSEL(0, 0);<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while(Find(szFind, TRUE, fMatchCase, fWholeWord,TRUE)) {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Replace (szReplace);<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SETSEL(ichStart, ichEnd);<br>
    &nbsp;&nbsp;&nbsp; }<br>
    &nbsp;&nbsp;&nbsp; VOID FindReplace(<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char * szFind, char * szReplace,<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FRT frt,<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BOOL fDown, BOOL fMatchCase, BOOL fWholeWord)<br>
    &nbsp;&nbsp;&nbsp; { switch (frt)<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { case frtFind:<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Find(szFind, fDown, fMatchCase, 
    fWholeWord,FALSE);<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case frtReplace:<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Find(szFind, fDown, fMatchCase, 
    fWholeWord,FALSE);<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Replace (szReplace);<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case frtRepAll:<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ReplaceAll(szFind, szReplace, fMatchCase, 
    fWholeWord);<br>
    &nbsp;&nbsp;&nbsp; }<br>
    }<br>
    &nbsp;&nbsp; 这些代码本来并不是给C++ Builder用的，但我们只要稍加改动就能使用了，这也为我们移植以前的代码提供了新思路，即一般只要将过去程序中的窗口或控制的句柄（HWND）用C++Builder中表单或组件的Handle属性来代替，将过去程序中的程序事例句柄用HInstance代替，就能方便的完成移植。回到程序中来，上面有5个函数和2个宏，其实我们直接使用的只有FindReplace函数。先在表单上放上FindDialog和ReplaceDialog两个对话框，随后写“查找(F)...”菜单项的处理代码：<br>
    FindDialog1-&gt;Execute();<br>
    &nbsp;&nbsp; 
    你可能会很奇怪，这么简单，那查找的过程在哪里呢？当用户按了查找对话框的[查找下一个(F)]按钮后，会产生FindDialog的OnFind事件，在该事件的处理函数中进行查找工作。如何编写组件的事件函数？<br>
    （1）在表单编辑区选中该组件（这里是FindDialog1）；<br>
    （2）在对象观察器（如果没有显示，按F11调出）中选择Event（事件），系统将列出事件；<br>
    （3）双击事件后面的编辑框（这里是OnFind），系统将切换入代码编辑区；<br>
    （4）输入事件处理代码。<br>
    下面给出OnFind的处理代码：<br>
    MainForm - &gt; SerFocus();<br>
    FindReplace(FindDialog1 - &gt; FindText.c_str(), &quot;&quot;, frtFind,<br>
    &nbsp;&nbsp;&nbsp; FindDialog1 - &gt; Options. Contains(frDown),<br>
    &nbsp;&nbsp;&nbsp; FindDiaiog1 - &gt; Options.Contains(frMatchCase),<br>
    &nbsp;&nbsp;&nbsp; FindDialog1 - &gt; Options.Contains(frWholeWord));<br>
    同样的，“替换(&amp;R)”菜单项处理代码是：<br>
    ReplaceDialog1 - &gt; Execute();<br>
    ReplaceDialog1的onFind 事件的处理代码：<br>
    MainForm - &gt; SetFocus();<br>
    if(ReplaceDialog1 - &gt; Options.Contains(frFindNext))<br>
    FindReplace(ReplaceDialog1 - &gt; FindText.c_str(),&quot;&quot;, frtFind,<br>
    &nbsp;&nbsp;&nbsp; ReplaceDialog1 - &gt; Options. Contains(frDown),<br>
    &nbsp;&nbsp;&nbsp; ReplaceDialog1 - &gt; Options. Contains(frMatchCase),<br>
    &nbsp;&nbsp;&nbsp; ReplaceDialog1 - &gt; Options. Contains(frWholeWord));<br>
    ReplaceDialog1的onReplace 事件（用户按了[替换(R)]按钮）的处理代码：<br>
    MainForm - &gt; SetFocus ();<br>
    if(ReplaceDialog1 - &gt; Options. Contains (frReplace))<br>
    FindReplace(ReplaceDialog1 - &gt; FindText. c_str(),<br>
    &nbsp;&nbsp;&nbsp; ReplaceDiaiog1 - &gt; ReplaceText. c_str(), frtReplace,<br>
    &nbsp;&nbsp;&nbsp; ReplaceDialog1 - &gt; Options. Contains(frDown),<br>
    &nbsp;&nbsp;&nbsp; ReplaceDialog1 - &gt; Options. Contains(frMatchCase),<br>
    &nbsp;&nbsp;&nbsp; ReplaceDialog1 - &gt; Options. Contains(frWholeWord));<br>
    else if(ReplaceDialog1 - &gt; Options. Contains (frReplaceAll))//全部替换<br>
    FindReplace(ReplaceDialog1 - &gt; FindText.c_str(),<br>
    &nbsp;&nbsp;&nbsp; ReplaceDialog1 - &gt; ReplaceText, c_str(), frtRepAll,<br>
    &nbsp;&nbsp;&nbsp; ReplaceDialog1 - &gt; Options. Contains(frDown),<br>
    &nbsp;&nbsp;&nbsp; ReplaceDialog1 - &gt; Options. Contains(frMatchCase),<br>
    &nbsp;&nbsp;&nbsp; ReplaceDialog1 - &gt; Options. Contains(frWholeWord));<br>
    当然，还有“查找下一个(N)”菜单项，处理的方法几乎和OnFind一样：<br>
    FindReplace(FindDialog1 - &gt; FindText. c_str(),&quot;&quot;, frtFind,<br>
    &nbsp;&nbsp;&nbsp; FindDialog1 - &gt; Options. Contains (frDown),<br>
    &nbsp;&nbsp;&nbsp; FindDialog1 - &gt; Options. Contains (frMatchCase),<br>
    &nbsp;&nbsp;&nbsp; FindDialog1 - &gt; Options. Contains(frWholeWord));<br>
    &nbsp;&nbsp;&nbsp; 至此为止，终于真的“大”功告成了。至于“帮助(H)”菜单处理，你可以用WinHelp来显示一个帮助文<br>
    件，用MessageBox来显示“关于XXX”的对话框，这些都不怎么和C++ Builder有关，我就不赘述了。<br>
    &nbsp;&nbsp;&nbsp; 最后还有些收尾工作，选择Project菜单Options，将显示一个程序设置的对话框。<br>
    &nbsp;&nbsp;&nbsp; 1．选择Application页面，这里Title是程序在任务栏上的标题，默认的是程序文件名。我们将它设为<br>
    “我的记事本V1.00”。接着，单击[Load Icon...]按钮来为你的软件选择一个图标。<br>
    &nbsp;&nbsp;&nbsp; 2．选择Compiler页面，单击[Release]按钮，这样就不会向程序中插入调试代码而加快执行速度。<br>
    &nbsp;&nbsp;&nbsp; 3．选择Linker页面，取消对Use Dynamic RTL的选择，不使用动态链接库。<br>
    &nbsp;&nbsp;&nbsp; 4．选择Packages页面，取消对Build with runtime packages的选择，不使用运行时包。<br>
    &nbsp;&nbsp;&nbsp; 按OK退出后，选Project菜单中的Build NotePad来编译一下，你的第一个用C++ 
    Builder3制作的称得上“软件”的程序终于诞生了。</td>
  </tr>
  <tr>
    <td width="100%"><hr>
    </td>
  </tr>
  <tr>
    <td width="100%">中国程序员网站版权所有</td>
  </tr>
</table>

<p><br>
</p>
</body>
</html>
