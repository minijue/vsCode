<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>用C++ Builder3 制作NotePad（记事本）</title>
<link rel="stylesheet" href="my.css"
tppabs="http://person.zj.cninfo.net/~lifu/images/my.css">
</head>

<body style="font-size: 9pt" bgcolor="#FFFFFF">

<table border="0" cellspacing="2" cellpadding="0" bordercolor="#DED8CD" width="100%">
  <tr bgcolor="#CCFFCC">
    <td><span style="font-size: 9pt">现在的位置是：<a href="Vc_idx.htm"
    tppabs="http://person.zj.cninfo.net/~lifu/index.html">Visual C++/C++</a> <b>&gt;</b> 用C++ 
    Builder3 制作NotePad（记事本）</span></td>
  </tr>
  <tr>
    <td></td>
  </tr>
</table>

<table border="0" width="100%" style="font-size: 9pt" bgcolor="#E8E8E8">
  <tr>
    <td width="100%"><table border="1" width="32%" style="font-size: 9pt" height="30"
    cellspacing="0" cellpadding="2">
      <tr>
        <td width="100%" bgcolor="#4264B5"><p align="center"><font color="#FFFFFF">资料整理<span
        class="f">&middot;</span><a href="http://fasoft.yeah.net" target="_blank"
        style="color: rgb(255,255,255)">中国程序员网站</a></font></td>
      </tr>
    </table>
    </td>
  </tr>
  <tr>
    <td width="100%">　<table border="0" width="100%">
      <tr>
        <td width="100%"></td>
      </tr>
    </table>
    </td>
  </tr>
  <tr>
    <td width="100%"><p align="center"><span style="font-size: 9pt"><font color="#000000"><strong>用C++ 
    Builder3 制作NotePad（记事本）</strong></font></span></td>
  </tr>
  <tr>
    <td width="100%"></td>
  </tr>
  <tr>
    <td>启动C++ Builder3后，在File菜单中选New APPlication来建立一个新程序。这时，显示在屏幕中间的窗口的标题是Form1，这个窗口是程序的主表单（就是主窗口的意恩），它将在程序启动时自动显示。而以后再创建的表单（Form）一般需要用Show()方法（Method）来显示。和组件一样，系统为第一个表单起名为Form1，以后的表单起名为Form2、Form3等等，标题（Caption）也是如此。<br>
    &nbsp;&nbsp; 当然，你可以将它们改成你喜欢的名字。我们先来把Form1的名字（Name）属性设为MainForm，把MainForm的标题（Caption）属性设为“Untited.txt--我的记事本”。接着可以用鼠标拖动窗口的位置和改<br>
    变窗口的大小。以上的这些工作，几乎每个程序都需要如法炮制一番。<br>
    &nbsp;&nbsp; 随后，我们要开始NotePad的编程工作了。知己知彼，百战不殆，先来分析一下MicroSoft 
    NotePad的结构。其实NotePad是附件里最简单的程序了，它的主窗口中只包含一个占据全部用户区域（Client 
    Area）的多行的编辑控制（Edit）。由于编辑控制最多容纳64KB文字（Windows95），所以NotePad只能打开小于64KB的文件。好，我们来依样画葫芦，选择Standard中的多行编辑（Memo）组件（而不是单行编辑组件）。<br>
    &nbsp;&nbsp; 放入表单中，将多行编辑Memo1的Align属性设为alClient，这时Memo1撑满了整个窗口，Memo1中显示的是Memo1。选择Memo1的Lines属性，[TString]后面出现了一个按钮。<br>
    &nbsp;&nbsp; 单击该按钮，将出现一个设置Lines属性的对话框，其中第一行便是“Memo1”。多行编辑（Memo）组件的Lines属性在设计时（Design 
    Time）设定的内容将在该窗口创建时自动显示。由于我们不需要显示什么，所以把“Memo1”擦掉，选OK退出。你一定想看看目前的效果，运行一下吧。编译……连接……启动程序……怎<br>
    么样，是不是和NotePad一模一样，能打字、删字、删行，还能使用右键菜单来复制（copy）和粘贴（paste）。<br>
    &nbsp;&nbsp; 
    本来就是嘛，用一样的编辑控制，不一样才怪呢。哎，不对，好像字体小了点，而且没有滚动条。没有关<br>
    系，关闭程序回到C++ Builder3中，先修改Memo1的字体（Font）属性，选择system字体（当然你爱选什么字<br>
    体都可以），然后设置滚动条（ScrollBars）属性，选择ssBoth（两根滚动条都要）。在这些改动之后，先别急着运行，windows的程序没菜单是不行的。在C++ 
    Builder中，菜单也是组件之一。选择Standard中的主菜单（MainMenu）组件放入表单中。主菜单（MainMenu）组件显示为一个图标。顺便提一句菜单，对话框或系统功能之类组件属于非可视组件（nonvisual 
    components），它们的工作基本不是用来满足视觉的，或者在程序运行时根本就看不见（相对于界面上可视组件来说），因此你可以将非可视组件放在表单中的任意位置。<br>
    &nbsp;&nbsp; 接下来的工作是制作菜单，双击主菜单MainMenu1的图表，会弹出菜单编辑窗口，开始时是一个空菜单。按右键会弹出一个菜单（不是我们要做的菜单），其中：<br>
    Insert（添加一个菜单项，按Insert键完成相同的功能）<br>
    Delete（删除一个菜单项，按Delete键完成相同的功能）<br>
    Create SubMenu（添加一个子菜单，按Ctrl + →键完成相同的功能）<br>
    Select Menu（选择一个菜单，用来关闭当前编辑的菜单并选择另一个菜单来编辑）<br>
    Save as Template（将当前菜单保存为模板，供以后使用）<br>
    Insert From Template（将已有的菜单模板加入当前菜单）<br>
    Delete Template（删除菜单模板）<br>
    Insert From Resource（从资源文件中取得菜单加入当前菜单）<br>
    &nbsp;&nbsp; 制作“我的记事本”的菜单有一种偷懒的方法，就是照抄Microsoft记事本的菜单。你可以用BC5.02的IDE打开Notepad.exe（先把打开文件对话框中的Viewer设为Edit 
    Resource，再把文件类型设为Exe cutable（*.exe），这样才是以编辑资源的方式打开EXE文件，否则默认的打开方式是Debug调试程序），将里面的菜单导出以RC（资源脚本）方式存盘，然后用Insert 
    From Resource导入该菜单；一共用不了2分钟。<br>
    &nbsp;&nbsp; 
    还有一种方法就是自己一项一项慢慢地做。当然，不管你用什么方法，最后都要做出菜单来才能继续下面的工作。下面附上从Windows 
    NT4.0中Notepad导出的菜单的资源脚本menu.rc，把下面的文件以menu.rc存盘就能用C++ 
    Builder3来导入了：<br>
    1 MENU<br>
    { POPUP &quot;文件(&amp;F)&quot;<br>
    &nbsp; { MENUITEM &quot;新建(&amp;N)&quot;, 9<br>
    &nbsp;&nbsp;&nbsp; MENUITEM &quot;打开(&amp;O)...&quot;, 10<br>
    &nbsp;&nbsp;&nbsp; MENUITEM &quot;保存(&amp;S)&quot;, 1<br>
    &nbsp;&nbsp;&nbsp; MENUITEM &quot;另存为(&amp;A)...&quot;, 2<br>
    &nbsp;&nbsp;&nbsp; MENUITEM SEPARATOR<br>
    &nbsp;&nbsp;&nbsp; MENUITEM &quot;页面设置(&amp;T)...&quot;, 32<br>
    &nbsp;&nbsp;&nbsp; MENUITEM &quot;打印(&amp;P)&quot;, 14<br>
    &nbsp;&nbsp;&nbsp; MENUITEM SEPARATOR<br>
    &nbsp;&nbsp;&nbsp; MENUITEM &quot;退出(&amp;X)&quot;, 28<br>
    &nbsp; }<br>
    &nbsp; POPUP &quot;编辑(&amp;E)&quot;<br>
    &nbsp; { MENUITEM &quot;撤消(&amp;U)\tCtrl+Z&quot;, 25<br>
    &nbsp;&nbsp;&nbsp; MENUITEM SEPARATOR<br>
    &nbsp;&nbsp;&nbsp; MENUITEM &quot;剪切(&amp;T)\tCtrl+X&quot;, 768,GRAYED<br>
    &nbsp;&nbsp;&nbsp; MENUITEM &quot;复制(&amp;C)\tCtrl+C&quot;, 769, GRAYED<br>
    &nbsp;&nbsp;&nbsp; MENUITEM &quot;粘贴(&amp;P)\tCtrl+V&quot;, 770，GRAYED<br>
    &nbsp;&nbsp;&nbsp; MENUITEM &quot;删除(&amp;L)\tDel&quot;,771, GRAYED<br>
    &nbsp;&nbsp;&nbsp; MENUITEM SEPARATOR<br>
    &nbsp;&nbsp;&nbsp; MENUITEM &quot;全部选定(&amp;A)&quot;, 7<br>
    &nbsp;&nbsp;&nbsp; MENUITEM &quot;时间/日期(&amp;D)\tF5&quot;,12<br>
    &nbsp;&nbsp;&nbsp; MENUITEM SEPARATOR<br>
    &nbsp;&nbsp;&nbsp; MENUITEM &quot;自动换行(&amp;W)&quot;, 27<br>
    &nbsp;&nbsp;&nbsp; MENUITEM &quot;设置字体(&amp;F)...&quot;, 37<br>
    &nbsp; }<br>
    &nbsp; POPUP &quot;搜索(&amp;S)&quot;<br>
    &nbsp; { MENUITEM &quot;查找(&amp;F)...&quot;, 3<br>
    &nbsp;&nbsp;&nbsp; MENUITEM &quot;查找下一个(&amp;N)\tF3&quot;, 8<br>
    &nbsp;&nbsp;&nbsp; MENUITEM &quot;替换(&amp;R)&quot;', 40<br>
    &nbsp; }<br>
    &nbsp; POPUP &quot;帮助(&amp;H)&quot;<br>
    &nbsp; { MENUITEM &quot;帮助主题(&amp;H)&quot;, 5<br>
    &nbsp;&nbsp;&nbsp; MENUITEM SEPARATOR<br>
    &nbsp;&nbsp;&nbsp; MENUITEM &quot;关于记事本(&amp;A)...&quot;,11<br>
    &nbsp; }<br>
    }<br>
    关于菜单，还有两点要提：<br>
    1．一般没有必要去改动菜单项的Name属性，使用系统给出的默认名就可以了。<br>
    2．以“-”为标题的菜单项即是菜单分割条，而菜单项的Break属性提供的分割则是一种很奇怪的样子--“垂直分害条”（群山笑：这个名词是我自已加上的）。<br>
    &nbsp;&nbsp; OK，到此为止，界面部分的工作已经全部完成了，接下来便是代码部分的编写。首先要做的就是打开文件和存盘的工作。我们来建立一个char 
    *UserFileName的全局变量来存放文件名。按工具条上的Toggle Form/Uint将工作窗口切换到代码编辑区。这个按钮用于表单编辑区和代码编辑区的相互切换，按F11显示对象观察器。在“TMainForm 
    *MainForm；”下加语句：<br>
    char *UserFileName=&quot;untitled.txt&quot;；//默认文件名Untitled.txt<br>
    BOOL If_saved=TRUE；//表示文件存盘与否<br>
    char title_buf[256]；//标题的内容<br>
    &nbsp;&nbsp; 接着，我们再切换回表单编辑区，从Dialogs组件条中选SaveDialog组件放入表单中。<br>
    &nbsp;&nbsp; SaveDialog组件就是用来显示Save As对话框的，当然用Windows API也能实现此功能，这里将使用SaveDialog组件。将SaveDialog1的DefaultExt（默认的扩展名）属性设为.txt，这表示如果用户没有加扩展名，系统会自动加上“.txt”。按Filter属性后的[…]按钮，在弹出的对话框中输入“文本文件”“*.txt”“所有文件”“*.*”。另外再双击Options属性，将展开后其中的ofOverwritePrompt（文件覆盖提醒）属性设为true。接着在表单编辑区的菜单中选菜单项“另存为（A）...”，这时C++ 
    Builder3会自动切换到代码编辑区，而光标停在一个函数的开头。在该例中菜单项“另存为（A）…”的名字属性是A1，所以这个函数的名字是A1Click（TObject 
    * Sender），表示用户选择（Click）这个菜单项而执行的函数。我们所要做的是弹出Save 
    As对话框来获得用户输入的文件名，并将这个文件存盘。所以在这个函数里加如下的语句：<br>
    if(!SaveDialog1-&gt;Execute()) return; //如果用户选择了取消，我们就return<br>
    UserFileName = SaveDialog1 -&gt; FileName.c_str();<br>
    / * FileName保存了用户输入的文件名，但是AnsiString类型的，用其中的c_str()方法可以将其转换成字符串*/<br>
    Memo1 -&gt;Lines-&gt;SaveToFile（UserFlleName）；<br>
    If_saved=TRUE; //已经存盘<br>
    sprintf(title_buf,&quot;% s - 我的记事本”, UserFileName); /* 
    设置窗口的标题，记得要加上include &lt;stdio.h&gt; * /<br>
    Caption=title_buf;<br>
    / * Memo中的Lines属性即是编辑控制中的内容，Lines属性是Strings类型的，用其中提供的SaveToFile方法可以方便地将编辑控制中的内容存盘 
    */<br>
    &nbsp;&nbsp; 
    类似地，我们再来处理打开文件的工作。首先，在表单中放置一个OpenDialog组件，DefaultExt和Filter<br>
    属性同SaveDialog1，将Options属性中的ofFileMustExist（文件必须存在）设为true。然后在表单编辑区中<br>
    的菜单中选菜单项“打开(O)...”，在代码编辑区中输入如下语句。<br>
    if(!if_saved)<br>
    if(Application -&gt;MessageBox(&quot;文件还未保存，是否要保存？&quot;,&quot;我的记事本&quot;,<br>
    MB_OKCANCEL+MB_DEFBUTTON1+MB_ICONWARNING)==ID_OK) S1Click(NULL); <br>
    / * 如果文件没有保存，我们得先征求用户是否要保存文件。s1Click()是“保存(s)”菜单项的处理函数（就是接下来处理的菜单项），“保存(S) 
    ”菜单项的工作就是将文件存盘，所以我们没有必要写重复的代码，而只要直接调用该函数就可以了。注意，如果你的“保存(S)”菜单项的名字属性不是S1而是其他，那么这个函数的名字也会有所不同，但总是“名字”+Click() 
    */<br>
    if(!OpenDialog1-&gt;Execute())return;<br>
    UserFileName=OpenDialog1-&gt;FileName.c_str();<br>
    Memo1-&gt;Lines-&gt;LoadFromFile(UserFileName);<br>
    sprintf(title_buf,&quot;% s - 我的记事本&quot;, UserFileName);<br>
    Caption = title_buf;<br>
    （为节省篇幅，以下凡是重复的操作描述省略）<br>
    &nbsp;&nbsp; 处理“保存(S)”菜单项，输入：<br>
    Memo1-&gt;Lines-&gt;SaveToFile(UserFileName);<br>
    If_saved=TRUE;<br>
    sprintf(title_buf,&quot;% s - 我的记事本&quot;, UserFileName)&quot;;<br>
    Caption = title_buf;<br>
    &nbsp;&nbsp; 处理“新建(N)”菜单项，输入如下语句：<br>
    lf(!If_saved)<br>
    if(Application -&gt;MessageBox (&quot;文件还未保存，是否要保存？&quot;,&quot;我的记事本&quot;,<br>
    MB_OKCANCEL+MB_DEFBUTTON1+MB_ICONWARNING)==ID_OK)S1Click(NULL);<br>
    sprintf(UserFileName,&quot;Untitled.txt&quot;);<br>
    sprintf(title_buf, &quot;% s - 我的记事本-未存盘&quot;,UserFileName);<br>
    Caption=title_buf;<br>
    Memo1-&gt;Lines-&gt;Clear(); //将编辑控制中的内容清空<br>
    &nbsp;&nbsp; 随后，我们要处理Memo1的OnChange事件（Events）。一旦编辑控制中的内容有改变，Memo1就将产生OnChange事件，这时需要将If_saved置为FALSE，表示文件已经改动过了，并在标题上显示“未存盘”。在对象观察器中选Memo1，再单击下面的Events，将列出许多事件，第一个就是OnChange，双击后面的编辑框，后面的操作和处理菜单项是一样的（其实前面处理的菜单项就是处理菜单的OnClick事件），输入：<br>
    If_saved=FALSE;<br>
    sprintf(title_buf,&quot;% s -我的记事本-未存盘&quot;, UserFileName);<br>
    Caption=title_buf;<br>
    &nbsp;&nbsp; 随后处理MainForm的OnClose事件，输入：<br>
    //OnClose事件在关闭窗口时产生，需要做一些收尾工作<br>
    if(!If_saved)<br>
    if(application-&gt;MessageBox(&quot;文件还未保存，是否要保存？&quot;,&quot;我的记事本&quot;,<br>
    MB_OKCANCEL+MB_DEFBUTTON1+MB_ICONWARNING)==ID_OK)S1Click(NULL);<br>
    &nbsp;&nbsp; 最后，处理“退出(X)”菜单项，输入如下语句：<br>
    if(!If_saved)<br>
    if(application-&gt;MessageBox（&quot;文件还未保存，是否要保存？&quot;,&quot;我的记事本&quot;,<br>
    MB_OKCANCEL+MB_DEFBUTTON1+MB_ICONWARNING)==ID_OK)S1Click(NULL);<br>
    Application-&gt;Terminate(); //程序结束<br>
    &nbsp;&nbsp; 到此为止，终于小功告成了，快把项目保存下来吧。在File菜单中选Save 
    Project As…，首先弹出的对<br>
    话框要求输入表单的文件名(不能和表单的名字属性相同)，我们就输入Main。随后弹出的对话框才是要求输入项目（Project）的文件名，该文件名也就是exe文件的名字，我们输入NotePad。保存后再选Project菜单<br>
    里的Make NotePad，或按Ctrl+F9，就会产生一个NOtePad.exe，这就是我们自己做的记事本，目前它已经能打开文件、编辑并保存。你一定发现菜单中还有许多功能尚未实现，这就是我只说小功告成的原因，不过<br>
    下次我们会完成它。<br>
    &nbsp;&nbsp; 附件中除了记事本（NotePad），还有一个写字板（WordPad）。它们最大的区别在于前者使用的是编辑<br>
    控制（Edit），而后者使用的是Rich Edit控制（有些书翻译成丰富文本控制）。与编辑控制相比，Rich 
    Edit除了能给文本加上各种修饰，还支持简单的对象链接和嵌入技术（Object 
    Linking and Embedding）。<br>
    &nbsp;&nbsp; 此外，Microsoft Win32 SDK的文档中说Rich Edit控制能接受的文本大小将只受内存大小的限制，这比<br>
    编辑控制的64KB强多了。当然，效率又是另一个问题。我曾试图用写字板（WordPad）打开一个15MB的文件，硬盘读了10多分钟还没结果，只能按Reset重新启动了（我可有64MB内存哦）。自然使用Rich 
    Edit控制也比编辑控制难的多。在以后讲到RichEdit组件时，详细讲述它的用法。</td>
  </tr>
  <tr>
    <td width="100%"><hr>
    </td>
  </tr>
  <tr>
    <td width="100%"><span style="font-size: 9pt">中国程序员网站版权所有</span></td>
  </tr>
</table>

<p><br>
<br>
</p>
</body>
</html>
