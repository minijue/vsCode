<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>您现在的位置是</title>
</head>

<body>

<div align="center"><center>

<table border="1" cellspacing="0" cellpadding="2" width="100%" style="font-size: 9pt"
bordercolor="#000000" bordercolordark="#FFFFFF">
  <tr bgcolor="#CCFFCC">
    <td><span style="font-size: 9pt">您现在的位置是： <b><a href="../../progidx.htm">编程技巧</a> --&gt; 
      <a href="../Vcidx098.htm">Visual C++</a></b></span></td>    
  </tr>    
</table>    
</center></div><div align="center"><center>    
    
<table border="1" width="100%" style="font-size: 9pt" bgcolor="#FFFFFF"    
bordercolor="#000000" cellpadding="2" cellspacing="0" bordercolordark="#FFFFFF">    
  <tr>    
    <td width="85%" align="left" valign="top"><table border="1" width="32%" style="font-size: 9pt" height="30"    
    cellspacing="0" cellpadding="2" bgcolor="#FFFFFF" bordercolor="#000000"    
    bordercolordark="#FFFFFF">    
      <tr>    
        <td width="100%" bgcolor="#4264B5"><p align="center"><span style="font-size: 9pt"><font    
        color="#FFFFFF">资料整理&middot;<a href="http://chinaprog.yeah.net" target="_blank"    
        style="color: rgb(255,255,255)">中国程序员网站</a></font></span></td>    
      </tr>    
    </table>    
      <p>　</p>
      <p align="center">C++与Java语言及其开发工具&nbsp;</p>
      <p><br>
      <br>
      一谈到Java,人们马上会想起一种类似于C和C++的、适用于分布环境的面向对象编程语言,想到这种语言的简单、稳定、安全、与体系结构无关、可移植、可解释、高性能、多线索和动态性等特征。这些都是Java作为一种程序设计语言的主要特征。但是,如果希望更好地理解Java语言,最好的方法是把这种语言与其同类型的语言相比较。既然Java类似于C++ ,把它同C++进行一番比较则是顺理成章的事情。&nbsp;<br>
      <br>
      一、Java语言&nbsp;<br>
      <br>
      Java是由Sun公司的一个技术小组研制出来的。在实现Java语言的过程中,小组的技术人员很快就意识到:C++无法成为一种完全面向对象的、网络化的开发语言。C++是通过给原先的C语言增加面向对象功能而开发出来的,因此,它存在着先天不足。这主要体现在C++种类繁多,功能大量冗余,同时又没有任何一种C++编译器能够支持它的全部功能。鉴于这种情况,Sun公司的技术人员决定不扩充C++,而开发一种全新的计算机语言(Java的前身Oak)。但是,C++已经成了大多数编程人员所熟练掌握的语言,Java的设计显然不能无视这个现实。如果Java和C++之间的差别<br>
      过大,那么程序员们在学会这种语言的过程中无疑要花费大量的时间和精力。因此,Java保留了尽可能多的C++风格。&nbsp;<br>
      <br>
      Java是完全面向对象的,这和C++不尽相同。尽管C++被认为是一种面向对象的语言,但它仍然支持过程式程序设计风格。Java则不然,它要求程序员采用完全面向对象的编程技术 ,从而消除了由于混用两种相同的编程风格而导致的种种问题。另一方面,Java的"外观"和 "感觉"和C++又有着很多相似之处。Java消除了C和C++中的冗余以及所有过程式的编程风格 ,并且不再支持指针数据类型,同时增加了数组的自动边界检查和自动内存垃圾搜集,并且把数组封装到类结构内,从而有助于开发分布计算环境下的应用程序。&nbsp;<br>
      <br>
      不过,Java之所以能够成为一种理想的编程语言,最重要的原因还在于其"内嵌"的内存管理和多线索功能。C++语言支持程序员编写一些非常低级的程序,从而能够访问机器硬件 ,并操纵实际内存地址。但这些是以牺牲可移植性为代价的,因为这时每个程序都是针对某种具体硬件环境的。而Java却是通过提供各种边界检查和内存管理来确保代码的可移植性 ,同时,还提供了内嵌的多线索功能,使类似于内存垃圾搜集一类的操作可以在后台进行,从而保证了较高的执行效率。&nbsp;<br>
      <br>
      Java语言能够具有这些优点,主要是因为它是作为一种全新的语言而设计的。如果仅仅是扩充C++,Java将无法避免C++中遗留的大量过程式特性,其解释器的规模将急剧增长,从而降低了系统的总体性能,代码的可移植性和稳定性的实现即使是可能的,也将非常困难。总之,Java的这些特性,为其成为下一代编程语言奠定了良好的基础。&nbsp;<br>
      <br>
      1.Java 的面向对象特征&nbsp;<br>
      <br>
      面向对象技术的关键在于封装、继承和动态联编,下面就谈谈Java是如何支持这些关键特性的。&nbsp;<br>
      <br>
      面向对象技术的基本单位是对象,对象在Java中称为类(Class)。一个类实际上就是一段用于实现对象行为的代码,它是提供封装性的根本所在。也就是说,对象及其相关的所有操作均被封装到一个类中。&nbsp;<br>
      <br>
      所有的对象都有一个状态。类也有状态,以"实例变量"表示。实例变量由相应的类进行控制,除某些特殊情况外其它任何类都无法访问这些变量。实例变量通过方法(method)进行访问。方法相当于过程式语言中的函数,它是一个可多次调用的代码段。程序员必须通过调用方法来实现对类的控制,即改变类的状态,而且只能实现类的方法所允许的操作。这就是面向对象技术的工作原理。&nbsp;<br>
      <br>
      当然,在个别情况下(对某些面向对象的语言而言),编程人员也可以直接访问实例变量 ,但这并不是一个值得推荐的做法,因为它违背了面向对象的初衷。&nbsp;<br>
      <br>
      面向对象编程的优点主要在于代码的可重用性。当需要进行某些重复性操作时,编程人员不必反复地重写相同的代码段,而只需创建对象的多个实例即可。因为编程人员既不需要了解对象是如何创建的,也不用知道对象内部的工作机理,需要知道的只是对象方法的调用机制,其余的工作将由对象所属的类进行处理。在Java中,程序员可以编写完成各种功能的类,发布编译之后的代码,并且只需要告诉用户如何控制这些类即可。&nbsp;<br>
      <br>
      Java通过类来实现对象,并且提供了类的多种用法。类可以作为各对象实例的一个模板。为创建类的新实例,可以调用其构造函数,它是每当创建类的一份新的拷贝时都必须调用的一个特殊方法。当一个类的所有程序都已经结束运行,或者Java觉得不再需要调用该类时 (比方说应用程序已经结束),必须调用这个类的终结函数(finalize),以进行一些必要的清除工作。当然,Java的终结函数和C++中的析构函数会有所差别,因为Java可进行自动垃圾清除。&nbsp;<br>
      <br>
      在Java中,对变量和方法的访问控制是通过访问修饰符来实现的。Java定义了4种<br>
      访问级别:公共(public)、受保护(protected)、私有(private)和友好(friendly)。<br>
      公共类型的方法及变量可从任意类进行访问;受保护类型的方法及变量只能从当前<br>
      类及其子类访问;私有类型的方法及变量则只能从当前类访问。如果未给出这三种<br>
      类型中任意一种的显式说明 ,表明相应的方法或变量属于"友好"类型,从而可由属<br> 
      于同一"包"(package)内的所有类进行访问。在Java内,"包"是一个单独的编译单<br> 
      位,它是具有某种共性的类所组成的集合。通过定义包这个单位,可实现相关对象<br> 
      之间的相互访问,同时把这些对象与包之外的其它对象隔离。&nbsp;<br>
      <br>
      面向对象的编程机制是Java的一个极为重要的方面。在Java内,如果不创建新类,<br>
      就无法创建应用程序。Java定义了一个特殊的超类Object,用户创建的类都是Object<br>
      的子类。J ava程序既可在解释器内也可在浏览器内运行,但无论采用哪种方式,都<br> 
      必须先创建一个类实例,然后才能提交运行。此外,利用继承机制,用户还可充分利<br> 
      用各种超类提供的功能。&nbsp;<br>
      <br>
      2. 与C++的差别&nbsp;<br>
      <br>
      尽管C++程序员可以相对容易地掌握Java编程,但他们仍然必须克服从C++带来的一<br>
      些旧习惯。Java取消了C++中的如下特性或功能:&nbsp;<br>
      <br>
      ・结构或指针 ・#define语句&nbsp;<br>
      <br>
      ・指针 ・多重继承&nbsp;<br>
      <br>
      ・独立的函数 ・GOTO语句&nbsp;<br>
      <br>
      ・操作符重载 ・自动类型转换&nbsp;<br>
      <br>
      Java不支持结构和指针,而且取消了C++中的#define或#typedef语句和头文件。&nbsp;<br>
      <br>
      事实上,constant和typedef这两条语句包含了#define语句的作用。现在,结构和<br>
      联合已经被Java的类所代替。删除这些特性的原因是:由于其希望维持与C语言的<br>
      向后兼容性,C ++的语言规范包含了大量冗余。比如,类实际上就已经包括了结构<br> 
      和联合的作用,因此这两种数据结构完全可以取消。关于#define语句,Java语言规<br> 
      范的制订者认为:尽管该语句的出发点是为了增强程序的可读性,但实际效果却恰<br> 
      恰相反,它常常导致难读的代码,故应该予以取消。Java不再支持独立函数,因此任<br> 
      何函数都必须封装到某个类中。由于人们普遍认为, C++所用的超类是非常不稳定<br> 
      的,因此Java抛弃了C++中的多继承并代之以接口。Java的接口指的是,在别的类看<br> 
      来一个类所能实现的方法。它所显示的只是一个类的方法或常量和变量 ,而不是<br> 
      这个类的全部结构。&nbsp;<br>
      <br>
      最后,Java还取消了C++中的GOTO语句、操作符重载、自动类型转换及指针数据类<br>
      型。 GOTO语句引起的争议已经有很多年了,可一直阴魂不散,这跟某些程序员对该<br> 
      语句一直情有独钟有关。C++仍然支持数据类型的自动转换,但Java要求编程人员<br> 
      显式实现数据类型之间的转换。自动数据类型转换使得两个数据类型互不兼容的<br> 
      变量可以相互赋值,而不需要给出显式说明。这有时会导致一些问题,其中最常见<br> 
      的是精确度损失。比方说,如果把一个带符号的32位整数赋给一个无符号整数,则<br> 
      所有的结果均为正数。Java的设计者们认为这很容易引起程序错误,从而决定不支<br> 
      持这种转换方式。&nbsp;<br>
      <br>
      某些C和C++程序员也许会觉得遗憾,因为Java不再支持他们非常愿意使用的指针类<br>
      型。但我们都知道,指针是调试程序时使人最感头痛的地方之一。Java的设计者们<br>
      认为,由于Ja va取消结构类型并且把数组封装到了对象里面,指针已经不再有用武<br> 
      之地。但有些C和C++高级编程人员可能仍然需要一段时间才能走出指针的阴影。<br> 
      因为指针的用法尽管很难掌握,可一旦掌握了其使用技巧,就会让人感到它的功能<br> 
      的确非常强大。作为一种面向分布式计算环境的编程语言,Java放弃对指针的支持<br> 
      是非常顺理成章的,因为只有这样,才可能产生一种稳可能产生一种稳定、高效而<br> 
      且安全的代码。&nbsp;<br>
      <br>
      3. 内存管理和线索&nbsp;<br>
      <br>
      Java语言带来的好处还在于其自动内存管理和线索控制。在C和C++中,内存必须用<br>
      free、 malloc和其它许多内存管理标准库管理。因此,系统要了解何时分配、释<br> 
      放内存并且跟踪所有的内存使用情况是非常困难的。如果要在C和C++中实现线索<br> 
      功能,必须使用一个可对线索进行各种控制的类库。而在Java中,尽管线索仍然需<br> 
      要类的支持,但系统却在语言级包括了线索同步机制。&nbsp;<br>
      <br>
      Java具有内嵌的内存管理程序。一旦创建了一个对象,Java的运行系统就开始跟踪<br>
      这个对象,直到不再需要跟踪该对象的所有引用为止。当某个对象不存在相应的引<br>
      用时,Java把这个对象放到一个用于垃圾搜集的栈内。为在性能损失最小的情况下<br>
      提供自动垃圾搜集机制,这个垃圾搜集程序将在后台或作为低优先级线索运行。这<br>
      样,Java的垃圾搜集软件将在前台线索的执行期间抽空执行,或者在系统显式提出<br>
      需要使用那些被已经死亡的类所占用的内存空间时执行。&nbsp;<br>
      <br>
      从后台内存管理程序可以很明显地看出,多线索的确可以增强Java环境的相对性能。<br>
      鉴于多线索的重要性,Java在语言级提供了线索同步机制,使多线索成为一种内嵌<br>
      特性。Java 语言支持针对方法的同步修饰符,并通过该修饰符来指明线索的运行<br> 
      顺序。此外,Java还能控制方法与实例变量的相互作用机制,确保了各方法之间在<br> 
      修改数据时不会产生冲突。&nbsp;<br>
      <br>
      Java的内存管理和线索支持还具有使Java语言简单化的作用。正是由于把内存管<br>
      理任务嵌入到了Java环境,Java语言才可以取消指针数据类型、malloc和free函<br>
      数。这样,程序员就可以把更多的时间化在真正的编程工作上,而不是去跟踪调试<br>
      与内存使用相关的程序错误。正是由于其多线索机制,Java才可以为一个可移植<br>
      的解释系统提供较高的性能。&nbsp;<br>
      <br>
      Java语言非常适合于异构网络系统(尤其是Internet)上的高性能、分布式计算环<br>
      境。虽然个人机系统未必可以看作是高性能的,但目前的个人机已经具有相当好<br>
      的性能。再者, 目前几乎所有操作系统均提供了各种高级特性,如内嵌的联网功<br> 
      能和真正的多任务、多线索支持等。然而在几年前,这些功能还只有昂贵的UNIX<br> 
      工作站才能提供。有了这些软硬件基础 ,加上Java的简单易学及面向对象特性,<br> 
      未来的程序员将可以在联入网络的个人机上开发适合于在各种硬件和软件平台上<br> 
      发布的高级"内容"。&nbsp;<br>
      <br>
      二、Java开发工具集&nbsp;<br>
      <br>
      Java不仅提供了一个功能丰富的语言和运行环境,而且还提供了一个Java开发工<br>
      具集( Java Developers` Kits,简称JDK)。编程人员和最终用户可以利用这些工<br> 
      具来开发或调用 Java内容。JDK包括如下工具:&nbsp;<br>
      <br>
      ・Javac:Java语言编译器,输出结果为Java字节码。&nbsp;<br>
      <br>
      ・Java:Java字节码解释器。&nbsp;<br>
      <br>
      ・Javap Disassembler:Java字节码分解程序,本程序返回Java程序的成员变量及<br> 
      方法等信息。&nbsp;<br>
      <br>
      ・Javaprof:资源分析工具,用于分析Java程序在运行过程都调用了哪些资源,包括<br>
      类和方法的调用次数和时间,以及各数据类型的内存使用情况等。&nbsp;<br>
      <br>
      ・Javah:C代码处理工具 ,用于从Java类调用 C++代码。&nbsp;<br>
      <br>
      ・Java Applet Viewer:小应用程序浏览工具,用于测试并运行Java小应用程序。&nbsp;<br>
      <br>
      ・Java Debugger API:Java调试工具API。&nbsp;<br>
      <br>
      ・Prototype Debugger:Java调试工具原型。&nbsp;<br>
      <br>
      Java开发环境还包括Java类库(包括I/O类库、用户界面类库、网络类库等)和<br>
      HotJava WWW浏览器。其中,HotJava浏览器提供了在WWW环境下运行Java代码的一<br> 
      个运行系统,而且还为WWW开发人员提供了一个Java开发框架。Java解释器是面向<br> 
      Java程序的一个独立的运行系统,它可以一种稳定、高性能方式运行那些独立于<br> 
      平台的Java字节码,Java编译器则用于生成这些字节码。&nbsp;<br>
      <br>
      Java解释器和浏览器所包括的各种类库为Java程序员提供了很好的编程支持。利<br>
      用这些工具,开发人员可以开发Applet(小应用程序)、 Application(独立应用程<br> 
      序)、 Protoc olHandler (WWW增强协议处理程序)及 Content Handler (内容处<br> 
      理程序)。随着时间的推移,Java工具,无论是其数目还是功能都在不断发展,以后<br> 
      的Java开发人员将能够以更快的速度开发出质量更高的程序。&nbsp;<br>
      <br>
      目前,Sun公司已经提供了基于各种硬件平台的Java开发工具版本。 
      </p>
      <p>　    
    </td>    
  </tr>    
</table>    
</center></div>    
<p><br>
</p>

</body>

</html>
