<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>您现在的位置是</title>
</head>

<body>

<div align="center"><center>

<table border="1" cellspacing="0" cellpadding="2" width="100%" style="font-size: 9pt"
bordercolor="#000000" bordercolordark="#FFFFFF">
  <tr bgcolor="#CCFFCC">
    <td><span style="font-size: 9pt">您现在的位置是： <b><a href="../../progidx.htm">编程技巧</a> --&gt; 
      <a href="../Vbidx099.htm">Visual Basic</a></b></span></td>    
  </tr>    
</table>    
</center></div><div align="center"><center>    
    
<table border="1" width="100%" style="font-size: 9pt" bgcolor="#FFFFFF"    
bordercolor="#000000" cellpadding="2" cellspacing="0" bordercolordark="#FFFFFF">    
  <tr>    
    <td width="85%" align="left" valign="top"><table border="1" width="32%" style="font-size: 9pt" height="30"    
    cellspacing="0" cellpadding="2" bgcolor="#FFFFFF" bordercolor="#000000"    
    bordercolordark="#FFFFFF">    
      <tr>    
        <td width="100%" bgcolor="#4264B5"><p align="center"><span style="font-size: 9pt"><font    
        color="#FFFFFF">资料整理&middot;<a href="http://chinaprog.yeah.net" target="_blank"    
        style="color: rgb(255,255,255)">中国程序员网站</a></font></span></td>    
      </tr>    
    </table>    
      <p align="center">Visual Basic动画编程技术     
      <p><br> 
      &nbsp;&nbsp;&nbsp; 在Visual Basic中利用Image和Timer控件能很方便地实现动画。本文将介绍Visual Basic动画编程的基本原理和实现三种不同类型动画的编程技术。<br> 
      <br> 
      一、 基本原理<br> 
      动画是一种运动的模拟，其实现方法是在屏幕上快速地显示一组相关的图象。因此实现动画的基础是图象的显示和使图象快速、定时地移动或变化。在Visual Basic中，用LoadPicture函数将BMP、ICO和WMF格式的图象文件装入内存，并将函数返回值赋予Image对象的Picture属性，便能在Image对象中显示图象。使图象移动或变化的基本方法有三种，即：<br> 
      1． 用Image对象的Move方法移动图象，其Left和Top属性指示了Image对象的当前左上角位置；<br> 
      2． 调用LoadPicture函数装载不同的图象，并赋给Image对象的Picture属性，将在对象中显示不同的图象，即实现图象变化；<br> 
      3． 修改Image对象的Width和/或Height属性可以缩放图象。使用Timer控件可以实现定时控制。Timer对象的Interval属性设置了定时间<br> 
      隔，即调用Timer事件过程的时间间隔。在Timer事件过程中处理控制Image对象的移动或变化，便能实现动画。Timer对象的Interval值决定了动画的变化或移动速度，其单位是毫秒（1/1000秒）。Timer对象的Enabled属性决定了Timer事件是否有效。设置Enabled属性为True将启动Timer事件（如启动动画）；为False则将使Timer事件无效（如停止动画）。<br> 
      <br> 
      二、 无位移动画<br> 
      无位移动画是指动画对象不移动，但图象不断变化，其典型例子是翻书。实现无位移动画的方法是，设置好Image对象和Timer对象后，在Timer事件过程中调用调用LoadPicture函数装载不同的图象，并赋予Image对象的Picture属性，使对象中显示不同的图象，即实现图象变化。<br> 
      下面是翻书动画的例子。程序启动时，在窗体中显示一本翻开的书，用鼠标左键点击书，则将开始翻书；再用鼠标左键点击书，则书将停止翻动。位图文件book1.bmp~ book4.bmp分别表现了翻书时，正在翻的书页的不同位置，它们存放在当前工程所在的目录中。在需显示动画的窗体（Form1）中设置Image对象Image1和Timer对象Timer1，并按下表设置它们的属性，未列出的属性使用缺省值。<br> 
      对象<br> 
      属性<br> 
      设置值<br> 
      Image1<br> 
      Picture<br> 
      ...(工程文件所处路径)Book1.bmp<br> 
      Timer1<br> 
      Enabled<br> 
      False<br> 
      <br> 
      Interval<br> 
      150<br> 
      程序代码如下：<br> 
      Option Explicit			‘变量必须先定义，才能使用<br> 
      Dim ImageNo%			‘当前的位图编号<br> 
      Dim IsPlaying As Boolean	‘动画是否启动<br> 
      <br> 
      Private Sub Form_Load()&nbsp;<br>
    IsPlaying = False			‘开始时，动画未启动<br> 
    Image1.ToolTipText = "开始" ‘鼠标移到书上时，将出现“开始”提示<br> 
    ImageNo% = 1				‘动画从book1.bmp开始<br> 
      End Sub<br> 
      <br> 
      Private Sub Image1_Click()		‘用鼠标左键点击了书<br> 
    If IsPlaying Then			‘动画已启动，则停止<br> 
        IsPlaying = False<br> 
        Timer1.Enabled = IsPlaying<br> 
        Image1.ToolTipText = "开始"<br> 
    Else					‘动画未启动，则启动<br> 
        IsPlaying = True<br> 
        Timer1.Enabled = IsPlaying<br> 
        Image1.ToolTipText = "停止"‘鼠标移到书上时，将出现“停止”提示<br> 
    End If<br> 
      End Sub<br> 
      <br> 
      Private Sub Timer1_Timer()		‘Timer事件<br> 
    ImageNo% = ImageNo% + 1	‘动画下一帧<br> 
    If ImageNo% > 4 Then		‘如果动画已到最后一帧，则<br> 
        ImageNo% = 1			‘再从第一帧开始<br> 
    End If<br> 
      <br> 
		`在Image对象中显示动画的当前帧<br> 
    Image1.Picture = LoadPicture(App.Path &amp; "ook" &amp; ImageNo% &amp; ".bmp")<br> 
      End Sub<br> 
      代码中App.Path指定了当前应用程序所在的路径。<br> 
      <br> 
      三、 单帧位移动画<br> 
      单帧位移动画，是指同一幅图象的位置不断变化而形成的动画，其典型实例时云彩被风吹动。编制单帧位移动画的方法是在Timer事件过程中调用Image对象的Move方法来移动图象。下面是云彩移动的例子。程序启动时，在窗体中显示一朵云，用鼠标左键点击云，则云彩将开始飘动，如碰到窗体的边界，云彩将改变移动方向；再用鼠标左键点击云，则云将停止移动。位图文件cloud.bmp存放在当前工程所在的目录中。<br> 
      在需显示动画的窗体（Form1）中设置Image对象Image1和Timer对象Timer1，并按下表设置它们的属性，未列出的属性使用缺省值。<br> 
      对象<br> 
      属性<br> 
      设置值<br> 
      Image1<br> 
      Picture<br> 
      ...(工程文件所处路径)Cloud.bmp<br> 
      Timer1<br> 
      Enabled<br> 
      False<br> 
      <br> 
      Interval<br> 
      150<br> 
      程序代码如下：<br> 
      Option Explicit			‘变量必须先定义，才能使用<br> 
      Dim IsPlaying As Boolean	‘动画是否启动<br> 
      Dim DetaX%, DetaY%		‘沿X、Y轴的移动位置增量<br> 
      <br> 
      Private Sub Form_Load()<br> 
    IsPlaying = False			‘开始时，动画未启动<br> 
    Image1.ToolTipText = "开始"	‘鼠标移到书上时，将出现“开始”提示<br> 
    DetaX% = 100			‘沿X轴的移动位置增量为100单位<br> 
    DetaY% = 100			‘沿Y轴的移动位置增量为100单位<br> 
      End Sub<br> 
      <br> 
      Private Sub Image1_Click()		‘用鼠标左键点击了书<br> 
    If IsPlaying Then			‘动画已启动，则停止<br> 
        IsPlaying = False<br> 
        Timer1.Enabled = IsPlaying<br> 
        Image1.ToolTipText = "开始"<br> 
    Else					‘动画未启动，则启动<br> 
        IsPlaying = True<br> 
        Timer1.Enabled = IsPlaying<br> 
        Image1.ToolTipText = "停止"<br> 
    End If<br> 
      End Sub<br> 
      <br> 
      Private Sub Timer1_Timer()		‘Timer事件<br> 
		‘移动Image对象<br> 
    Image1.Move Image1.Left + DetaX%, Image1.Top + DetaY%<br> 
      <br> 
		‘碰到边界，则校正位置，并反向<br> 
    If Image1.Left + Image1.Width >= Form1.Width Then	‘碰到右边界<br> 
        Image1.Move Form1.Width - Image1.Width, Image1.Top<br> 
        DetaX% = -DetaX%<br> 
    ElseIf Image1.Top + Image1.Height >= Form1.Height Then‘碰到上边界<br> 
        Image1.Move Image1.Left, Form1.Height - Image1.Height<br> 
        DetaY% = -DetaY%<br> 
    ElseIf Image1.Left &lt;= 0 Then			‘碰到左边界<br> 
        Image1.Move 0, Image1.Top<br> 
        DetaX% = -DetaX%<br> 
    ElseIf Image1.Top &lt;= 0 Then				‘碰到下边界<br> 
        Image1.Move Image1.Left, 0<br> 
        DetaY% = -DetaY%<br> 
    End If<br> 
      End Sub<br> 
      注意，云彩碰到边界而反向移动，是通过改变DetaX%、 DetaY%的符号来实现的。<br> 
      <br> 
      四、 多帧位移动画<br> 
      多帧位移动画是最复杂的动画，综合了无位移动画和单帧位移动画的特点。自然界的运动大多数都具有多帧位移的特点，如小鸟的飞翔，在小鸟位置的移动的同时，其翅膀也在扇动。实现多帧位移动画需要在Timer事件过程中同时处理Image对象的图象更替和位置移动。<br> 
      下面是小鸟飞翔的例子。程序启动时，在窗体中显示一只小鸟，用鼠标左键点击它，则小鸟将开始扇翅飞翔，如碰到窗体的边界，小鸟将改变飞翔方向；再用鼠标左键点击小鸟，则小鸟将停止飞翔。位图文件bird1.bmp~ bird4.bmp分别表现了小鸟飞翔时，其翅膀的不同位置，它们存放在当前工程所在的目录中。在需显示动画的窗体（Form1）中设置Image对象Image1和Timer对象Timer1，并按下表设置它们的属性，未列出的属性使用缺省值。<br> 
      对象<br> 
      属性<br> 
      设置值<br> 
      Image1<br> 
      Picture<br> 
      ...(工程文件所处路径)Bird1.bmp<br> 
      Timer1<br> 
      Enabled<br> 
      False<br> 
      <br> 
      Interval<br> 
      150<br> 
      程序代码如下：<br> 
      Option Explicit			‘变量必须先定义，才能使用<br> 
      Dim ImageNo%			‘当前的位图编号<br> 
      Dim IsPlaying As Boolean	‘动画是否启动<br> 
      Dim DetaX%, DetaY%		‘沿X、Y轴的移动位置增量<br> 
      <br> 
      Private Sub Form_Load()<br> 
    IsPlaying = False<br> 
    Image1.ToolTipText = "开始"<br> 
    ImageNo% = 1<br> 
    DetaX% = 100<br> 
    DetaY% = 100<br> 
      End Sub<br> 
      <br> 
      Private Sub Image1_Click()<br> 
    If IsPlaying Then<br> 
        IsPlaying = False<br> 
        Timer1.Enabled = IsPlaying<br> 
        Image1.ToolTipText = "开始"<br> 
    Else<br> 
        IsPlaying = True<br> 
        Timer1.Enabled = IsPlaying<br> 
        Image1.ToolTipText = "停止"<br> 
    End If<br> 
      End Sub<br> 
      <br> 
      Private Sub Timer1_Timer()		‘Timer事件<br> 
    ImageNo% = ImageNo% + 1	‘动画下一帧<br> 
    If ImageNo% > 4 Then		‘如果动画已到最后一帧，则<br> 
        ImageNo% = 1			‘再从第一帧开始<br> 
    End If<br> 
      <br> 
		`在Image对象中显示动画的当前帧<br> 
    Image1.Picture = LoadPicture(App.Path &amp; "ird" &amp; ImageNo% &amp; ".bmp")<br> 
      <br> 
		‘移动Image对象<br> 
    Image1.Move Image1.Left + DetaX%, Image1.Top + DetaY%<br> 
      <br> 
		‘碰到边界，则校正位置，并反向<br> 
    If Image1.Left + Image1.Width >= Form1.Width Then		‘碰到右边界<br> 
        Image1.Move Form1.Width - Image1.Width, Image1.Top<br> 
        DetaX% = -DetaX%<br> 
    ElseIf Image1.Top + Image1.Height >= Form1.Height Then	‘碰到上边界<br> 
        Image1.Move Image1.Left, Form1.Height - Image1.Height<br> 
        DetaY% = -DetaY%<br> 
    ElseIf Image1.Left &lt;= 0 Then				‘碰到左边界<br> 
        Image1.Move 0, Image1.Top<br> 
        DetaX% = -DetaX%<br> 
    ElseIf Image1.Top &lt;= 0 Then					‘碰到下边界<br> 
        Image1.Move Image1.Left, 0<br> 
        DetaY% = -DetaY%<br> 
    End If<br> 
      End Sub<br> 
      <br> 
      五、 缩放动画<br> 
      气球的膨胀或缩小是缩放动画的典型例子。在Timer事件过程中修改Image对象的Width和/或Height属性，便可实现缩放动画。但如果要表现物体的同心缩放，则还应同时还需移动Image对象。下面是模拟气球在空中缩放（同心）的例子。程序启动时，在窗体中显示一只气球，用鼠标左键点击它，则气球将开始膨胀，如碰到窗体的边界，气球将缩小，缩小到原来大小时，又将膨胀；再用鼠标左键点击气球，则气球将停止缩<br> 
      放。位图文件Balloon.bmp存放在当前工程所在的目录中。在需显示动画的窗体（Form1）中设置Image对象Image1和Timer对象Timer1，并按下表设置它们的属性，未列出的属性使用缺省值。<br> 
      对象<br> 
      属性<br> 
      设置值<br> 
      Image1<br> 
      Picture<br> 
      ...(工程文件所处路径)Balloon.bmp<br> 
      <br> 
      Stretch<br> 
      True<br> 
      Timer1<br> 
      Enabled<br> 
      False<br> 
      <br> 
      Interval<br> 
      150<br> 
      程序代码如下：<br> 
      Option Explicit         		`变量必须先定义，才能使用<br> 
      Dim IsPlaying As Boolean    	`动画是否启动<br> 
      Dim Width0%, Height0%		`气球原大小<br> 
      Dim DetaX%, DetaY%      	`沿X、Y轴的缩放增量<br> 
      <br> 
      Private Sub Form_Load()<br> 
    IsPlaying = False&nbsp;<br>
    Image1.ToolTipText = "开始"<br> 
    Width0% = Image1.Width	‘保存气球的初始大小<br> 
    Height0% = Image1.Height<br> 
    DetaX% = 100<br> 
    DetaY% = 100<br> 
      End Sub<br> 
      <br> 
      Private Sub Image1_Click()<br> 
    If IsPlaying Then<br> 
        IsPlaying = False<br> 
        Timer1.Enabled = IsPlaying<br> 
        Image1.ToolTipText = "开始"<br> 
    Else<br> 
        IsPlaying = True<br> 
        Timer1.Enabled = IsPlaying<br> 
        Image1.ToolTipText = "停止"<br> 
    End If<br> 
      End Sub<br> 
      <br> 
      Private Sub Timer1_Timer()      `Timer事件<br> 
        `移动Image对象，保持同心缩放<br> 
    Image1.Move Image1.Left - DetaX% / 2, Image1.Top - DetaY% / 2<br> 
			‘按增量缩放<br> 
    Image1.Width = Image1.Width + DetaX%<br> 
    Image1.Height = Image1.Height + DetaY%<br> 
      <br> 
        `碰到边界，则缩小<br> 
    If Image1.Left + Image1.Width >= Form1.Width Or _<br> 
       Image1.Top + Image1.Height >= Form1.Height Or _<br> 
       Image1.Left &lt;= 0 Or Image1.Top &lt;= 0 Then<br> 
        DetaX% = -DetaX%<br> 
        DetaY% = -DetaY%<br> 
    End If<br> 
      <br> 
        `缩到原大，则膨胀<br> 
    If Image1.Width &lt;= Width0% Or Image1.Height &lt;= Height0% Then<br> 
        DetaX% = -DetaX%<br> 
        DetaY% = -DetaY%<br> 
    End If<br> 
      End Sub     
    </td>     
  </tr>     
</table>     
</center></div>     
 
</body> 
 
</html> 
