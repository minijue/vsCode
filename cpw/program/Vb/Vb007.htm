<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
<title>在VB中操纵OLE服务器应用程序</title>
</head>

<body style="font-size: 9pt" background="../../res/back.JPG">

<table border="0" width="100%" style="font-size: 9pt">
  <tr>
    <td width="100%" align="center"><strong>在VB中操纵OLE服务器应用程序</strong></td>
  </tr>
  <tr>
    <td width="100%" align="center">文/王玲 录入/江湖小子</td>
  </tr>
  <tr>
    <td width="100%" align="center">1999.08.07</td>
  </tr>
  <tr>
    <td width="100%" align="center"></td>
  </tr>
</table>

<p>OLE自动化是不同应用程序之间进行通讯的一个标准。OLE自动化的工作方式是：通讯被动方（OLE服务器）应用程序向通讯主动方（OLE客户机）应用程序提供一个以上可供其调用的OLE自动化对象类型，OLE客户机通过引用这些对象实现对OLE服务器的调用，然后通过设置对象的属性和使用对象的方法操纵OLE服务器应用程序，完成两者之间的通讯。<br>
<br>
Visual Basic是一个完全支持OLE自动化的应用程序开发工具。使用VB，既可以编制做为OLE服务器的应用程序，也可以编制作为OLE客户机的应用程序。MS 
Word 6.0是一个不完全支持OLE自动化的应用软件，它只能作为OLE服务器供其它应用程序调用。本文将以一个VB应用程序通过OLE自动化操纵MS 
Word 6.0的实例，具体描述在VB中操纵OLE服务器应用程序的方法。<br>
<br>
在VB代码中调用OLE服务器的方法如下：控件类型 属性 属性值 Data 
Control DataBaseNameName C:\VB\BIBLIO.MDBData1 RecordSource Authors DBGrid 
ControlCommandButton Control DataSource Data1 Name cmdReport Caption 生成报表 
CommandButton Control Name cmdExit Caption 退出<br>
<br>
⑴声明一个对象变量。如：Dim MS―WORD As Object<br>
<br>
⑵根据OLE服务器提供的对象类型，使用CreateObject函数创建一个对象，并由Set语句将该对象赋予对象变量。<br>
<br>
CreateObject函数的语法如下：<br>
<br>
CreateObject(class)<br>
<br>
函数参数class的格式为：appname.objecttype<br>
<br>
appname是提供对象的应用程序的名称，如：Word<br>
<br>
objecttype是欲创建的对象的类，如：Basic<br>
<br>
MS Word 6.0为OLE客户机应用程序提供了一个类型为“basic”的对象，VB可以使用该对象类型，实现对Word的调用。具体语句如下：<br>
<br>
Set MS―WORD = CreateObject(″Word.Basic″)<br>
<br>
⑶通过设置对象的属性和使用对象的方法，实现对OLE服务器的操纵。<br>
<br>
对象类型“basic”采用Word宏语言WordBasic的大多数语句和函数作为它的方法。也就是说，一旦在VB中创建了一个“basic”对象，就可以通过该对象使用大多数WordBasic语句或函数，从而可以近乎完美地操纵Word或Word文档。例如，下列语句在VB代码中使用WordBasic的FileNewDefault语句创建一个Word新文档：<br>
<br>
MS―WORD.FileNewDefault<br>
<br>
⑷调用结束后，使用关键字Nothing，释放该变量占用的资源。如：Set 
MS―WORD = Nothing<br>
<br>
实例<br>
<br>
本例将使用VB编写一个简单的数据库应用程序。该程序从数据库中取出数据，然后通过OLE自动化将这些数据输入至Word，并按照Word的排版格式编排成一个表格。例中使用的数据库是VB自含的BILIO.MDB数据库，数据检索结果取自Authors数据表。本例稍加改动，即可作为数据库应用程序的报表生成功能模块使用。<br>
<br>
首先，创建一个名为Form1的窗体，设置其Caption 属性为“OLE自动化演示”。然后在该窗体中加入四个控件并设置有关属性，具体如下：<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
完成上述工作后，按F5运行的屏幕布局应如下图示。<br>
<br>
接着需要编写VB代码来实现与Word的连接。本实例的代码清单如下（注：代码中的斜体部分是WordBasic宏语言的语句，这些语句的使用方法请参阅WordBasic宏语言有关资料）：<br>
<br>
⑴在Form1的General Declarations部分声明窗体级全局变量和常量。<br>
<br>
Dim MS―WORD As Object '声明一个对象变量<br>
<br>
Const MaxCols = 5 '声明一个用于标明当前数据记录集中字段个数的常量。在本例中字段个数为5<br>
<br>
⑵创建一个子例程InsertTableIntoMS―Word()，该子例程使用WordBasic宏语言在Word 
6.0中制作一个表格，并将当前数据记录集中的数据依次插入表格单元。<br>
<br>
Sub InsertTableIntoMS―Word()<br>
<br>
Dim i As Integer, j As Integer, Col As Integer, Row As Integer<br>
<br>
Dim CellContent As String<br>
<br>
Me.Hide<br>
<br>
Col = MaxCols<br>
<br>
Row = Data1.Recordset.RecordCount<br>
<br>
MS―WORD.FileNewDefault<br>
<br>
MS―WORD.MsgBox ″正在建立报表，请稍候…″, ″″, －1<br>
<br>
MS―WORD.LeftPara<br>
<br>
MS―WORD.ScreenUpdating 0<br>
<br>
MS―WORD.TableInsertTable , Col, Row, , , 16, 167<br>
<br>
MS―WORD.StartOfDocument<br>
<br>
Data1.Recordset.MoveFirst<br>
<br>
For i = 1 To MaxCols<br>
<br>
CellContent＄ = Data1.Recordset.Fields(i － 1).Name<br>
<br>
MS―WORD.Insert CellContent＄<br>
<br>
MS―WORD.NextCell<br>
<br>
Next i<br>
<br>
Do<br>
<br>
For i = 1 To MaxCols<br>
<br>
If IsNull(Data1.Recordset.Fields(i － 1).Value) Then<br>
<br>
CellContent＄ = ″″<br>
<br>
Else<br>
<br>
CellContent＄ = Data1.Recordset.Fields(i － 1).Value<br>
<br>
End If<br>
<br>
MS―WORD.Insert CellContent＄<br>
<br>
MS―WORD.NextCell<br>
<br>
Next i<br>
<br>
Data1.Recordset.MoveNext<br>
<br>
Loop Until Data1.Recordset.EOF = True<br>
<br>
MS―WORD.TableDeleteRow<br>
<br>
MS―WORD.StartOfDocument<br>
<br>
MS―WORD.TableSelectRow<br>
<br>
MS―WORD.TableHeadings 1<br>
<br>
MS―WORD.CenterPara<br>
<br>
MS―WORD.StartOfDocument<br>
<br>
MS―WORD.ScreenRefresh<br>
<br>
MS―WORD.ScreenUpdating 1<br>
<br>
MS―WORD.MsgBox ″结束″, ″″, －1<br>
<br>
Me.Show<br>
<br>
End Sub<br>
<br>
⑶命令按钮控件cmdReport的鼠标单击事件代码<br>
<br>
Private Sub cmdReport―Click()<br>
<br>
Dim Response<br>
<br>
Screen.MousePointer = 11<br>
<br>
Set MS―WORD = CreateObject(″Word.Basic″)<br>
<br>
MS―WORD.AppActivate ″Microsoft Word″, 1<br>
<br>
Call InsertTableIntoMS―Word<br>
<br>
Screen.MousePointer = 0<br>
<br>
End Sub<br>
<br>
⑷命令按钮控件cmdExit的鼠标单击事件代码<br>
<br>
Private Sub cmdExit―Click()<br>
<br>
Set MS―WORD = Nothing<br>
<br>
Unload Me<br>
<br>
End Sub<br>
<br>
几点说明<br>
<br>
①在本程序运行之前，Word 6.0必须已经成功安装，否则系统将产生一个VB可捕获的错误。Word 
6.0的表格列不能超过31列，否则系统将产生一个VB可捕获的错误。读者可以在代码中加入错误处理代码以处理这些错误。<br>
<br>
②若本程序运行时Word尚未运行，OLE自动化将试图启动它。因此程序代码中不必包括一条分开的指令来启动Word。若Word是由VB应用程序启动的，那么程序结束时Word将自动关闭；否则，Word将继续运行。<br>
<br>
③本实例使用的大部分WordBasic语句都与Word文档的插入点有关，如果在本程序运行过程中人为地移动了插入点，则有可能导致表格的混乱和错误。为了避免这种情况发生，本程序在执行插入操作之前使用ScreenUpdating语句将Word屏幕更新关闭，使用户在执行插入操作时不能移动插入点。<br>
<br>
从上述实例可以看到，通过OLE自动化，使我们在开发新的应用程序时可以“借用”现成的应用程序的部分或全部功能，从而大大地减轻开发的工作量，缩短开发周期，使开发工作事半功倍。这就是OLE自动化带给开发人员的好处。<br>
</p>
</body>
</html>
