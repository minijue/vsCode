<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
<title></title>
</head>

<body background="../../res/back.JPG">
<div align="center"><center>

<table border="0" width="560" height="4" cellspacing="0" cellpadding="0">
  <tr>
    <td width="570" height="7"><p align="center"><strong><span style="font-size: 9pt">用WinSock设计Chat程序</span></strong></td>
  </tr>
  <tr>
    <td width="570" height="9"></td>
  </tr>
  <tr>
    <td width="570" height="8"><span style="font-size: 9pt"><p align="center">录入:江湖小子</span></td>
  </tr>
</table>
</center></div>

<p><span style="font-size: 9pt">摘要:随着Internet的蓬勃发展，网络界面的交流使我们能够即时收到各地所发生的各项信息。我们在使用各种Browser浏览各网点时，只要Server能提供Chat（闲聊）的服务项目，我们就可以通过Browser所提供的Chat程序与网络上的其他使用者即时对谈及交流心得。本篇文章通过Visual 
Basic 5.0所提供的WInSock control，设计一个 Chat应用程序。我们通过Client及Server之间的文件传输，可以了解Chat程序的工作原理。<br>
<br>
WinSock control简介<br>
<br>
WinSock是windows系统提供的一种网络文件传输协议。以往我们使用WinSock设计程序时，必须调用系统提供的API来完成；但是在Visual 
Basic中调用API，因涉及参数传递类型，用起来并不方便。Visual Basic 5.0 
提供WinSock control简化我们的设计流程。它可以利用User Datagram 
Protocol(UDP)或Transmission Control Protocol(TCP)，来设计网络的Client-Server 
程序。<br>
<br>
TCP是一种Connection base的Protocol，在文件传输时会先行建立Link，通过Link 
可确保文件传输的正确性；UDP则是一种Connectionless的Protocol，它在传输文件时不会确保传输端的文件能够正确无误的传送到接收端，所以当我们使用UDP 
protocol时，我们通常要自己作接收确认的工作。<br>
<br>
UDP protocol看起来好像比较没效率，其实不然！UDP protocol有一个好处：当文件很小，或我们要做网络boardcast 
（广播）时，会比较有效率。 所以了！ 当我们利用WinSock设计程序时，首先要依自己的需要，决定使用那一种protocol。本文将分别教您使用TCP及UDP 
Protocol来设计Chat程序。<br>
<br>
以TCP设计Chat程序<br>
<br>
Step 1：找出Domain name及IP address<br>
<br>
在“我的电脑”中选择“控制面板”。Double click“网络”选项，选择“标识” 
，您将会发觉您的计算机名称、工作组名等信息。将它记录起来，我们稍后会用到。<br>
<br>
Step 2：设计TCP Server程序<br>
<br>
在File选项中选New Project建立一个新的工程，在屏幕上会看到许多选项，如 
ActiveX Document.EXE、ActiveX Document.DLL、ActiveX.EXE、ActiveXControl等，选Standard.EXE。<br>
<br>
接着在Project下选择Property属性选项，在General选项下将ProjectName改为TCP-Server，并将Form名称及Caption更改为Server。在屏幕的Form上加入一个 
WinSock control，取名为Tcps；加入两个TextBox control(Outtext、Intext)，并在两个TextBox前加入两个label，分别将caption改为Outtext、Intext。<br>
〈TextBox〉<br>
<br>
Name<br>
<br>
------------------------------------------------<br>
<br>
Outtext(输出文件)<br>
<br>
Intext(输入文件)<br>
<br>
〈Label〉<br>
<br>
Caption<br>
<br>
----------------------------------------------------<br>
<br>
Outtext(输出文件)<br>
<br>
Intext(输入文件)<br>
<br>
在Form_Load()中加入以下程序代码，这个动作是设置好我们Local的传输端口，并到接收的状态：<br>
<br>
Tcps.protocol=0-scktcp protocol<br>
<br>
Tcps.LocalPort = 1002<br>
<br>
Tcps.Listen<br>
<br>
双击Tcps，在Tcps_ConnectionRequest(ByVal requestID As Long) 
中加入以下程序代码，这表示winsock接受了连接请求：<br>
<br>
Tcps.Accept requestID<br>
<br>
双击Outtext到Outtext_change()，加入以下程序代码，当Outtext内容改变后，文件就会自动送出：<br>
<br>
Tcps.SendData Outtext.text<br>
<br>
在Tcps_DataArrival(ByVal bytesTotal As Long)中加入以下程序代码，这是用来把所接收的文件显示在Intext这个TextBox中。<br>
<br>
Dim S As StrIng<br>
<br>
Tcps.GetData S <br>
<br>
InText.Text = S<br>
<br>
这样我们就完成了Server端的设计。<br>
<br>
Step 3：设计TCP Client程序<br>
<br>
在File选项中选择New Project建立一个新的工程，在屏幕上看到许多选项，如 
ActiveX Document.EXE、ActiveX Document.DLL、ActiveX.EXE、ActiveX Control 等。选Standard.EXE。接着在 
Project下，选择Property属性选项，在General选项下，将Project Name改为TCP-Client，并将FORM名称及Caption更改为Client。<br>
<br>
在屏幕的Form上加入一个WinSock control，取名为 Tcpc，将protocol property设置成 
0-scktcp protocol，加入两个TextBox control(Outtext、Intext)，并在两个TextBox前加入两个Label，分别将其Caption改为Outtext、Intext。接着放入一个Button(button1)并将Caption 
改为Connect。<br>
<br>
(TextBox)<br>
<br>
Name <br>
<br>
-----------------------------------------------------<br>
<br>
Outtext(输出文件) <br>
<br>
Intext(输入文件)<br>
<br>
(Label)<br>
<br>
Caption<br>
<br>
--------------------------------------------------------<br>
<br>
Outtext(输出文件) <br>
<br>
Intext(输入文件)<br>
<br>
〈Button〉<br>
<br>
Name Caption<br>
<br>
--------------------------------------------------------<br>
<br>
Button1(执行建立session命令) Connect<br>
<br>
在Form_Load()中加入以下程序代码，这个动作是设置好我们Remote所要连接的传输端口及其网络名称。我们要连接的计算机网络名称为DAVID：<br>
<br>
Tcpc.RemoteHost =&quot;David&quot;<br>
<br>
Tcpc.RemotePort=1002<br>
<br>
双击Outtext到Outtext_change()加入以下程序代码，当Outtext内容改变后，文件会自动送出：<br>
<br>
Tcpc.SendData Outtext.text<br>
<br>
在Tcpc_DataArrival(ByVal bytesTotal As Long)中加入以下程序代码，这是用来把所接收的文件显示在Intext这个TextBox 
中。<br>
<br>
Dim S As StrIng<br>
<br>
Tcpc.GetData S <br>
<br>
InText.Text = S<br>
<br>
这样就完成了Client端的设计。<br>
<br>
Step 4：测试TCP Chat程序<br>
<br>
分别执行Server及Client程序，这时在Client的屏幕上显示In及Out TextBox及一个Connect 
Button；在Server屏幕上显示In及Out TextBox。<br>
<br>
我们按Client程序Connect button建立连接，连接建立成功后，我们可尝试在Client的Outbox 
中输入一些字符串：Hello nice to meet you！我们将在Server端的Inbox看到这些字串。 
接着我们在Server的Outbox也输入一些字符串：Nice to meet you, too！　我们将在Client 
端的Inbox看到这些字符串。结果证明我们成功了！<br>
<br>
用UDP设计Chat程序<br>
<br>
Step 1：设计第一个UDP(UDP1)程序<br>
<br>
在File选项中选择New Project建立一个新的工程，屏幕上会看到许多选项，如ActiveX 
Document.EXE、ActiveX Document.DLL、ActiveX.EXE、ActiveX Control 等，这时选Standard.EXE。接着在Project下选择Property属性选项，在General选项下将Project 
Name改为UDP1，将protocol property设置成0-udptcp protocol，并将Form名称及Caption更改为UDP1。<br>
<br>
在屏幕的Form上加入一个WinSock control，取名为UDP1；加入两个TextBox 
control ( Outtext、Intext)，并于两个TextBox前加入两个Label control，分别将Caption改为 
Outtext、　Intext。<br>
<br>
(TextBox)<br>
<br>
Name <br>
<br>
-----------------------------------------------------<br>
<br>
Outtext(输出文件)<br>
<br>
Intext(输入文件)<br>
<br>
(Label)<br>
<br>
Caption<br>
<br>
-------------------------------------------------------<br>
<br>
Outtext(输出文件)<br>
<br>
Intext(输入文件)<br>
<br>
在Form_Load()中加入以下程序代码，这个动作是设置好我们要连接的远端输入端口为 
1001，并将输入端口设为1002。<br>
<br>
UDP1.RemoteHost = &quot;DAVID&quot;<br>
<br>
UDP1.RemotePort = 1001<br>
<br>
UDP1.BInd 1002<br>
<br>
双击Outtext到Outtext_change()，加入以下程序代码，当Outtext 
内容改变，文件会自动送出：<br>
<br>
UDP1.SendData Outtext.text<br>
<br>
在UDP1_DataArrival(ByVal bytesTotal As Long)中加入以下程序代码，这是用来把所接收的文件显示在Intext这个TextBox 
中。<br>
<br>
Dim S As String<br>
<br>
UDP1.GetData S <br>
<br>
InText.Text = S<br>
<br>
这样我们就完成了UDP1的设计。<br>
<br>
Step 2：设计第二个UDP(UDP2)程序<br>
<br>
在File选项中选New Project建立一个新的工程，屏幕上会看到许多选项，如ActiveX 
Document.EXE、 ActiveX Document.DLL、ActiveX.EXE、ActiveX Control等，这时要选Standard.EXE。接着在 
Project下，选择Property属性选项，在 General选项下，将Project Name改为UDP2，将protocol 
property设置成0-udptcp protocol，并将Form名称及Caption更改为UDP2 。<br>
<br>
在屏幕的Form上加入一个WinSock control取名为UDP2 ，加入两个TextBox control 
( Outtext、Intext)，并在两个TextBox control前加入两个Label control，分别将Caption改为Outtext、Intext。<br>
(TextBox)<br>
<br>
Name<br>
<br>
-----------------------------------------------------<br>
<br>
Outtext(输出文件)<br>
<br>
Intext(输入文件)<br>
<br>
(Label)<br>
<br>
Caption<br>
<br>
--------------------------------------------------------<br>
<br>
Outtext(输出文件)<br>
<br>
Intext(输入文件)<br>
<br>
在Form_Load()中加入以下程序代码，这个动作是设置好我们要连接的远端输入端口，设置为1002，并将输入端口设置为1001。<br>
<br>
UDP2.RemoteHost = &quot;MARY&quot;<br>
<br>
UDP2.RemotePort = 1002<br>
<br>
UDP2.Bind 1001<br>
<br>
双击Outtext到Outtext_change()加入以下程序代码，当Outtext内容改变，文件就会自动送出：<br>
<br>
UDP2.SendData Outtext.text<br>
<br>
在UDP2_DataArrival(ByVal bytesTotal As Long) 
中加入以下程序代码，这是用来把所接收的文件显示在Intext这个TextBox 
中。<br>
<br>
Dim S As StrIng<br>
<br>
UDP2.GetData S<br>
<br>
InText.Text = S<br>
<br>
这样我们就完成了UDP2的设计。<br>
<br>
Step 3：测试UDP Chat程序<br>
<br>
分别执行UDP1及UDP2程序。这时UDP1的屏幕上显示In及Out<br>
TextBox；UDP2屏幕也显示In及Out两个TextBox。我们在UDP1的Outbox中输入一些字符串 
I want talk to Mary，我们将在UDP2端的Inbox看到这些字符串。接着我们在UDP2的Outbox也输入一些字符串This 
is Mary speaking!，我们将在UDP1端的Inbox看到这些字串。结果证明我们成功了！<br>
</span></p>
</body>
</html>
