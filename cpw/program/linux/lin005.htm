<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>现在的位置是</title>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
</head>

<body>

<table border="0" cellspacing="2" cellpadding="0" width="100%" style="font-size: 9pt">
  <tr bgcolor="#CCFFCC">
    <td><span style="font-size: 9pt">现在的位置是： <b><a href="linuxidx.htm">Unix/Linux</a> 
    &gt;</b> </span>Vi 使用说明</td>
  </tr>
  <tr>
    <td></td>
  </tr>
</table>

<table border="0" width="100%" style="font-size: 9pt" bgcolor="#E8E8E8">
  <tr>
    <td width="100%"><table border="1" width="32%" style="font-size: 9pt" height="30"
    cellspacing="0" cellpadding="2">
      <tr>
        <td width="100%" bgcolor="#4264B5"><p align="center"><font color="#FFFFFF">资料整理<span
        class="f">&middot;</span><a href="http://fasoft.yeah.net" target="_blank"
        style="color: rgb(255,255,255)">中国程序员网站</a></font></td>
      </tr>
    </table>
    </td>
  </tr>
  <tr>
    <td width="100%">　<table border="0" width="100%" bgcolor="#E8E8E8">
      <tr>
        <td width="100%"></td>
      </tr>
    </table>
    </td>
  </tr>
  <tr>
    <td width="100%"><p align="center"><strong>Vi 使用说明</strong></td>
  </tr>
  <tr>
    <td width="100%"></td>
  </tr>
  <tr>
    <td width="100%">O<br>
    Vi 简介<br>
    <br>
    Vi 是 Unix 世界里极为普遍的全萤幕文书编辑器，几乎可以说任何一台 
    Unix 机器都会提供这套软体。Linux 当然也有，它的 vi 其实是 elvis（版权问题），不过它们都差不多。熟悉 
    DOS 下的文书处理後，也许会感到 vi 并不好用；Unix 
    上也已经发展出许多更新、更好用的文书编辑器，但是并不一定每一台 
    Unix 机器上都会安装这些额外的软体。所以，学习 vi 
    的基本操作还是有好处，让你在各个不同的机器上得心应手。<br>
    <br>
    <br>
    Vi 基本观念<br>
    <br>
    Unix 提供一系列的 ex 编辑器，包括 ex, edit 和 vi 
    。相对於全萤幕编辑器，现在可能很难想像如何使用 ex, edit 
    这种行列编辑器（有人用过 DOS 3.3 版以前所附的EDLIN 吗？）。 Vi 
    的原意是 &quot;Visual&quot;，它是一个立即反应的编辑程式，也就是说可以立刻看到操作结果。<br>
    <br>
    也由於 vi 
    是全萤幕编辑器，所以它必须控制整个终端机萤幕哪里该显示些什麽。而终端机的种类有许多种，特性又不尽相同，所以 
    vi 有必要知道现在所使用的是哪一种终端机。这是藉由 TERM 
    这个环境变数来设定，设定环境变数方面请查看所使用 shell的说明。（除非执行 
    vi 的时候回应 unknow terminal type ，否则可以不用设定。）<br>
    <br>
    只要简单的执行 vi 就可以进入 vi 
    的编辑环境。在实际操作之前先对它有个概略的了解会比较好。Vi 
    有两种模式，输入模式以及指令模式。输入模式即是用来输入文字资料，而指令模式则是用来下达一些编排文件、存档、以及离开 
    vi 等等的操作指令。当执行 vi 
    後，会先进入指令模式，此时输入的任何字元都视为指令。<br>
    <br>
    <br>
    进入与离开<br>
    <br>
    要进入 vi 可以直接在系统提示字元下键入 vi ＜档案名称＞，vi 
    可以自动帮你载入所要编辑的档案或是开启一个新档。进入 vi 
    後萤幕左方会出现波浪符号，凡是列首有该符号就代表此列目前是空的。要离开 
    vi 可以在指令模式下键入 :q, :wq 
    指令则是存档後再离开（注意冒号）。要切换到指令模式下则是用 
    [ESC] 键，如果不晓得现在是处於什麽模式， 可以多按几次 [ESC]，系统会发出哔哔声以确定进入指令模式。<br>
    <br>
    <br>
    Vi 输入模式<br>
    <br>
    要如何输入资料呢？有好几个指令可以进入输入模式：<br>
    <br>
    新增 (append)<br>
    a 
    从游标所在位置後面开始新增资料，游标後的资料随新增资料向後移动。<br>
    A 从游标所在列最後面的地方开始新增资料。<br>
    <br>
    插入 (insert)<br>
    i 
    从游标所在位置前面开始插入资料，游标後的资料随新增资料向後移动。<br>
    I 从游标所在列的第一个非空白字元前面开始插入资料。<br>
    <br>
    开始 (open)<br>
    o 在游标所在列下新增一列并进入输入模式。<br>
    O 在游标所在列上方新增一列并进入输入模式。<br>
    <br>
    也许文字叙述看起来有点繁杂，但是只要实际操作一下马上可以了解这些操作方式。实务很重要，尤其是电脑方面的东西随时可以尝试及验证结果。极力建议实际去使用它而不要只是猛 
    Ｋ 文件，才有事半功倍的效用。（注：此段为废话。）<br>
    <br>
    <br>
    Vi 基本编辑<br>
    <br>
    配合一般键盘上的功能键，像是方向键、[Insert] 、[Delete] 
    等等，现在你应该已经可以利用 vi 来处理文字资料了。当然 vi 
    还提供其他许许多多功能让文字的处理更形方便，有兴趣的看倌请继续。<br>
    <br>
    在继续下去之前先来点 BCC 
    吧。电脑有许多厂牌，不同的硬体及作业系统。PC 也不是仅仅只有 
    IBM PC 
    及其相容品而已。事实上，包括键盘，终端机等等往往都有不同的规格。这代表什麽？<br>
    <br>
    在文书编辑软体上会遇这样的问题，某些电脑的键盘上没有特定的几个功能键！那麽不就有某些功能不能用了？这个问题在 
    Unix 系统上也一样，几乎各大电脑厂商都有自己的 Unix 系统，而 vi 
    的操作方法也会随之有点出入。我们固然可以用 PC 的键盘来说明 vi 
    的操作，但是还是得提一下这个问题。<br>
    <br>
    <br>
    删除与修改<br>
    <br>
    何谓编辑？在这里我们认为是文字的新增修改以及删除，甚至包括文字区块的搬移、复<br>
    制等等。这里先介绍 vi 的如何做删除与修改。（注意：在 vi 
    的原始观念里，输入跟<br>
    编辑是两码子事。编辑是在指令模式下操作的，先利用指令移动游标来定位要进行编辑<br>
    的地方，然後才下指令做编辑。）<br>
    <br>
    x 删除游标所在字元。<br>
    dd 删除游标所在的列。<br>
    r 修改游标所在字元，r 後接著要修正的字元。<br>
    R 进入取代状态，新增资料会覆盖原先资料，直到按 [ESC] 
    回到指令模式下为止。<br>
    s 删除游标所在字元，并进入输入模式。<br>
    S 删除游标所在的列，并进入输入模式。<br>
    <br>
    其实呢，在 PC 
    上根本没有这麽麻烦！输入跟编辑都可以在输入模式下完成。例如要删除字元，直接按 
    [Delete] 不就得了。而插入状态与取代状态可以直接用 [Insert] 
    切换，犯不著用什麽指令模式的编辑指令。不过就如前面所提到的，这些指令几乎是每台终端机都能用，而不是仅仅在 
    PC 上。<br>
    <br>
    在指令模式下移动游标的基本指令是 h, j, k, l 
    。想来各位现在也应该能猜到只要直接用 PC 
    的方向键就可以了，而且无论在指令模式或输入模式下都可以。多容易不是。<br>
    <br>
    当然 PC 键盘也有不足之处。有个很好用的指令 u 
    可以恢复被删除的资料，而 U 
    指令则可以恢复游标所在列的所有改变。这与某些电脑上的 [Undo] 
    按键功能相同。<br>
    <br>
    <br>
    Vi 进阶应用<br>
    <br>
    相信现在对於 vi 
    应该已经有相当的认识。处理文字也不会有什麽麻烦才对。如果有兴趣善用 
    vi 的其它功能进一步简化操作过程，不妨继续看下去。<br>
    <br>
    <br>
    移动游标<br>
    <br>
    由於许多编辑工作是藉由游标来定位，所以 vi 
    提供许多移动游标的方式，这个我们列几张简表来说明（这些当然是指令模式下的指令）：<br>
    <br>
    ┌―――――┬―――――――――――――┬―――――┐<br>
    │指令 │说明 │功能键 │<br>
    ├―――――┼―――――――――――――┼―――――┤<br>
    │0 │移动到游标所在列的最前面 │[Home] │<br>
    ├―――――┼―――――――――――――┼―――――┤<br>
    │$ │移动到游标所在列的最後面 │[End] │<br>
    ├―――――┼―――――――――――――┼―――――┤<br>
    │[CTRL][d] │向下半页 │ │<br>
    ├―――――┼―――――――――――――┼―――――┤<br>
    │[CTRL][f] │向下一页 │[PageDown]│<br>
    ├―――――┼―――――――――――――┼―――――┤<br>
    │[CTRL][u] │向上半页 │ │<br>
    ├―――――┼―――――――――――――┼―――――┤<br>
    │[CTRL][b] │向上一页 │[PageUp] │<br>
    └―――――┴―――――――――――――┴―――――┘<br>
    ┌――┬―――――――――――――――――┐<br>
    │指令│说明 │<br>
    ├――┼―――――――――――――――――┤<br>
    │H │移动到视窗的第一列 │<br>
    ├――┼―――――――――――――――――┤<br>
    │M │移动到视窗的中间列 │<br>
    ├――┼―――――――――――――――――┤<br>
    │L │移动到视窗的最後列 │<br>
    ├――┼―――――――――――――――――┤<br>
    │b │移动到下个字的第一个字母 │<br>
    ├――┼―――――――――――――――――┤<br>
    │w │移动到上个字的第一个字母 │<br>
    ├――┼―――――――――――――――――┤<br>
    │e │移动到下个字的最後一个字母 │<br>
    ├――┼―――――――――――――――――┤<br>
    │^ │移动到游标所在列的第一个非空白字元│<br>
    └――┴―――――――――――――――――┘<br>
    ┌――┬―――――――――――――――――――┐<br>
    │指令│说明 │<br>
    ├――┼―――――――――――――――――――┤<br>
    │n- │减号移动到上一列的第一个非空白字元 │<br>
    │ │前面加上数字可以指定移动到以上 n 列 │<br>
    ├――┼―――――――――――――――――――┤<br>
    │n+ │加号移动到下一列的第一个非空白字元 │<br>
    │ │前面加上数字可以指定移动到以下 n 列 │<br>
    ├――┼―――――――――――――――――――┤<br>
    │nG │直接用数字 n 加上大写 G 移动到第 n 列 │<br>
    └――┴―――――――――――――――――――┘<br>
    ┌――――┬―――――――――――――――┐<br>
    │指令 │说明 │<br>
    ├――――┼―――――――――――――――┤<br>
    │fx │往右移动到 x 字元上 │<br>
    │Fx │往左移动到 x 字元上 │<br>
    ├――――┼―――――――――――――――┤<br>
    │tx │往右移动到 x 字元前 │<br>
    │Tx │往左移动到 x 字元前 │<br>
    ├――――┼―――――――――――――――┤<br>
    │; │配合 f&amp;t 使用，重复一次 │<br>
    │, │配合 f&amp;t 使用，反方向重复一次 │<br>
    ├――――┼―――――――――――――――┤<br>
    │/string │往右移动到有 string 的地方 │<br>
    │?string │往左移动到有 string 的地方 │<br>
    ├――――┼―――――――――――――――┤<br>
    │n │配合 /&amp;? 使用，重复一次 │<br>
    │N │配合 /&amp;? 使用，反方向重复一次 │<br>
    └――――┴―――――――――――――――┘<br>
    ┌――――┬―――――――――――――――――――┬――――――――――┐<br>
    │指令 │说明 │备注 │<br>
    ├――――┼―――――――――――――――――――┼――――――――――┤<br>
    │n( │左括号移动到句子的最前面 │句子是以 │<br>
    │ │前面加上数字可以指定往前移动 n 个句子 │! . ? 
    三种符号来界定│<br>
    │n) │右括号移动到下个句子的最前面 │ │<br>
    │ │前面加上数字可以指定往後移动 n 个句子 │ │<br>
    ├――――┼―――――――――――――――――――┼――――――――――┤<br>
    │n{ │左括弧移动到段落的最前面 │段落是以 │<br>
    │ │前面加上数字可以指定往前移动 n 个段落 
    │段落间的空白列界定 │<br>
    │n} │右括弧移动到下个段落的最前面 │ │<br>
    │ │前面加上数字可以指定往後移动 n 个段落 │ │<br>
    └――――┴―――――――――――――――――――┴――――――――――┘<br>
    <br>
    不要尝试背诵这些指令，否则後果自行负责。它们看起来又多又杂乱，事实上这是文字叙述本身的障碍。再强调一次，实际去使用它只要几次就可以不经大脑直接下达这些奇奇怪怪的指令，远比死记活背搞得模模糊糊强多了。（注：若真的不经大脑而误删资料与我无关。另，此段为废话。）<br>
    <br>
    <br>
    进阶编辑指令<br>
    <br>
    这些编辑指令非常有弹性，基本上可以说是由指令与范围所构成。例如 
    dw 是由删除指令 d 与范围 w 所组成，代表删除一个字 d(elete) w(ord) 。<br>
    <br>
    指令列表如下：<br>
    <br>
    d 删除(delete)<br>
    y 复制(yank)<br>
    p 放置(put)<br>
    c 修改(change)<br>
    <br>
    范围可以是下列几个：<br>
    <br>
    e 游标所在位置到该字的最後一个字母<br>
    w 游标所在位置到下个字的第一个字母<br>
    b 游标所在位置到上个字的第一个字母<br>
    $ 游标所在位置到该列的最後一个字母<br>
    0 游标所在位置到该列的第一个字母<br>
    ) 游标所在位置到下个句子的第一个字母<br>
    ( 游标所在位置到该句子的第一个字母<br>
    } 游标所在位置到该段落的最後一个字母<br>
    { 游标所在位置到该段落的第一个字母<br>
    <br>
    说实在的，组合这些指令来编辑文件有一点点艺术气息。不管怎麽样，它们提供更多编辑文字的能力。值得注意的一点是删除与复制都会将指定范围的内容放到暂存区里，然後就可以用指令 
    p 贴到其它地方去，这是 vi 用来处理区段拷贝与搬移的办法。<br>
    <br>
    某些 vi 版本，例如 Linux 所用的 elvis 
    可以大幅简化这一坨指令。如果稍微观察一下这些编辑指令就会发现问题其实是定范围的方式有点杂，实际上只有四个指令罢了。指令 
    v 非常好用，只要按下 v 
    键，游标所在的位置就会反白，然後就可以移动游标来设定范围，接著再直接下指令进行编辑即可。<br>
    <br>
    对於整列操作， vi 
    另外提供了更方便的编辑指令。前面曾经提到过删除整列文字的指令 
    dd 就是其中一个；cc 可以修改整列文字；而 yy 
    则是复制整列文字；指令 D 
    则可以删除游标到该列结束为止所有的文字。<br>
    <br>
    <br>
    档案指令<br>
    <br>
    档案指令多以 : 
    开头，跟编辑指令有点区别。例如前面提到结束编辑的指令就是 :q。现在就简单说明一下作为本篇故事的结尾：<br>
    <br>
    :q 结束编辑(quit)<br>
    如果不想存档而要放弃编辑过的档案则用 :q! 强制离开。<br>
    :w 存档(write)<br>
    其後可加所要存档的档名。<br>
    可以将档案指令合在一起，例如 :wq 即存档後离开。<br>
    zz 功能与 :wq 相同。<br>
    <br>
    另外值得一提的是 vi 的部份存档功能。可以用 :n,mw filename 将第 n 
    行到第 m 行的文字存放的所指定的 filename 
    里去哩。时代在变，世界在变， vi 
    也在变，不过大致上就这样。好了，但愿从此以後王子跟公主过著幸福快乐的生活。<br>
    </td>
  </tr>
</table>

<p><br>
<br>
&#26;<br>
<br>
</p>
</body>
</html>
