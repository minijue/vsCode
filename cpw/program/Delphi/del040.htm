<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>您现在的位置是</title>
</head>

<body>

<div align="center">
  <center>
  <table border="1" cellspacing="0" cellpadding="2" width="100%" style="font-size: 9pt" bordercolor="#000000" bordercolordark="#FFFFFF">
    <tr bgcolor="#CCFFCC">
      <td><span style="font-size: 9pt">您现在的位置是： <b><a href="../progidx.htm">编程技巧</a> 
        --&gt; <a href="Del_idx.htm">DELPHI</a></b></span></td>
    </tr>
  </table>
  </center>
</div>
<div align="center">
  <center>
  <table border="1" width="100%" style="font-size: 9pt" bgcolor="#FFFFFF" bordercolor="#000000" cellpadding="2" cellspacing="0" bordercolordark="#FFFFFF">
    <tr>
      <td width="85%" align="left" valign="top">
        <table border="1" width="32%" style="font-size: 9pt" height="30" cellspacing="0" cellpadding="2" bgcolor="#FFFFFF" bordercolor="#000000" bordercolordark="#FFFFFF">
          <tr>
            <td width="100%" bgcolor="#4264B5">
              <p align="center"><span style="font-size: 9pt"><font color="#FFFFFF">资料整理・<a href="http://chinaprog.yeah.net" target="_blank" style="color: rgb(255,255,255)">中国程序员网站</a></font></span></td>
          </tr>
        </table>
        <p align="center">Delphi应用程序中中国式报表的制作<br>
        <br>
                    中国空间技术研究院物资部   史宝军</p> 
        <p><br> 
        &nbsp; 在众多可视化数据库开发工具中, Delphi以其真正的面向对象、高效率、支持多层结构应用开发、支持多层B/S结构开发等优良特性脱颖而出，成为广大编程人员的首选开发工具。<br> 
        <br> 
        &nbsp; 在数据库应用程序开发中，系统设计员、程序设计员需要考虑的一个重要问题是如何设计和输出报表，在Delphi中我们可以采用多种方案来解决这一问题，如运用OLE自动化技术将数据输出到MS-WORD、MS-EXCEL中等，但其中最直接、最本地化的还是使用Delphi3.0/40中的QuickReport报表组件，它是挪威QuSoft公司专门为Delphi 编写的，使用QuickReport可以迅速设计出符合西方人习惯的报表。<br> 
        &nbsp; 然而，在设计中国式报表时，笔者发现在QuickReport中设计列与列之间的竖线和斜线比较困难；虽然QuickReport提供了TQShape控件,使用该控件可以画出列与列之间的竖线，但如果用户不能正确调整TQShape实例的高度，输出报表中的竖线不是不连续就是超长，另外如果我们调整了某个Band的高度，我们将不得不调整该Band下的所有TQShape实例的高度；至于斜线，QuickReport报表组件根本就没有提供这一功能。<br>
        &nbsp; 笔者认真查找了有关资料，成功地解决以上问题，并愿意将解决方法与大家共享，希<br>
        望能对大家有所帮助。<br>
        <br>
        １、 解决思路<br> 
        &nbsp; 以TQShape为父类，建立新的控件，新控件可以画竖线、斜线和反斜线。重载TQShape 类的Paint方法，这样在设计阶段可以非常直观地画斜线、反斜线和竖线，用户可以在设计阶段选择线的类型，如果选择直线，控件自动将其高度调整为所属Band的高度，用户可以调整其横向位置但不能调整其高度；如果选择斜线，用户可以根据需要调整斜线的长度和倾角。重载TQShape 类的Print方法，这样可以在运行阶段输出直线和斜线。<br> 
        说明：该控件只能画直线和斜线，如果读者需要画矩形和园，可以使用TQShape控件来实现。<br> 
        <br> 
        ２、控件设计步骤<br> 
        步骤１、使用Delphi提供的控件向导，选择TQShape为父类，建立新类TMyQRShape，并选择适当的包(Package)，最后生成单元文件。<br> 
        步骤２、在生成的单元文件中，增加枚举类型，&nbsp;<br>
    TLines = ( None,TopBottom,BottomTop ) ;<br> 
        None、TopBottom、BottomTop三种取值，分别代表直线、斜线  和反斜线 / 。<br> 
        步骤３、在新类TMyQRShape 中增加private 成员 FLineType:TLines ，增加published属性 LineType:TLines Read FLineType Write SetFLineType 。<br> 
        步骤４、建立过程SetFLineType 。<br> 
        procedure TMyQRShape.SetFLineType(Value:TLines);<br> 
        begin<br> 
  if Value&lt;>FLineType then<br> 
  begin<br> 
    FLineType:=Value ;<br> 
    Invalidate ;<br> 
  end ;<br> 
        end ;<br> 
        步骤５、重载Paint方法<br> 
        procedure TMyQRShape.Paint ;<br> 
        begin<br> 
  case LineType  of<br> 
  BottomTop:<br> 
    begin<br> 
      Canvas.MoveTo(0,Height) ;<br> 
      Canvas.LineTo(width,0 ) ;<br> 
    end ;<br> 
  TopBottom:<br> 
    begin<br> 
      Canvas.MoveTo(0,0) ;<br> 
      Canvas.LineTo(width,Height ) ;<br> 
    end ;<br> 
  None:<br> 
    begin<br> 
      Height := Parent.Height ;<br> 
      Top:=0 ;<br> 
      Width:=4 ;<br> 
      Shape:=qrsVertLine ;<br> 
      Inherited Paint ;<br> 
    end ;<br> 
  end ;<br> 
        end ;<br> 
        <br> 
        步骤６、重载Print方法<br> 
        procedure TMyQRShape.Print(OfsX,OfsY : Integer);<br> 
        begin<br> 
  with QRPrinter do<br> 
  begin<br> 
    case LineType  of<br> 
    BottomTop:<br> 
      begin<br> 
        Canvas.MoveTo(XPos(OfsX + Size.Left), YPos(OfsY + Size.Top)+Height) ;<br> 
        Canvas.LineTo(XPos(OfsX + Size.Left)+width,YPos(OfsY + Size.Top) ) ;<br> 
    end ;<br> 
    TopBottom:<br> 
      begin<br> 
        Canvas.MoveTo(XPos(OfsX + Size.Left), YPos(OfsY + Size.Top)) ;<br> 
        Canvas.LineTo(XPos(OfsX + Size.Left)+Width,YPos(OfsY + Size.Top)+Height ) ;<br> 
      end ;<br> 
    None:<br> 
      Inherited Print(OfsX,OfsY ) ;<br> 
    end ;<br> 
  end ;<br> 
        end;<br> 
    步骤７、保存并安装TMyQRShape控件。<br> 
    本控件在Delphi40下调试、安装，并成功应用于某数据库管理系统的开发。该控件的完整代码如下。<br> 
    源程序：<br> 
        unit MyQRShape;<br> 
        <br> 
        interface<br> 
        <br> 
        uses<br> 
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,<br> 
  QuickRpt, Qrctrls;<br> 
        <br> 
        type<br> 
  TLines = ( None,TopBottom,BottomTop ) ;<br> 
        <br> 
  TMyQRShape = class(TQRShape)<br> 
  private<br> 
    FLineType:TLines ;<br> 
    procedure SetFLineType(Value:TLines) ;<br> 
  protected<br> 
    procedure Print(OfsX, OfsY : integer); override;<br> 
    procedure Paint ;Override ;<br> 
  public<br> 
        <br> 
  published<br> 
    property LineType:TLines Read FLineType Write SetFLineType ;<br> 
  end;<br> 
        <br> 
        procedure Register;<br> 
        <br> 
        implementation<br> 
        <br> 
        procedure TMyQRShape.SetFLineType(Value:TLines);<br> 
        begin<br> 
  if Value&lt;>FLineType then<br> 
  begin<br> 
    FLineType:=Value ;<br> 
    Invalidate ;<br> 
  end ;<br> 
        end ;<br> 
        <br> 
        procedure TMyQRShape.Paint ;<br> 
        begin<br> 
  case LineType  of<br> 
  BottomTop:<br> 
    begin<br> 
      Canvas.MoveTo(0,Height) ;<br> 
      Canvas.LineTo(width,0 ) ;<br> 
    end ;<br> 
  TopBottom:<br> 
    begin<br> 
      Canvas.MoveTo(0,0) ;<br> 
      Canvas.LineTo(width,Height ) ;<br> 
    end ;<br> 
  None:<br> 
    begin<br> 
      Height := Parent.Height ;<br> 
      Top:=0 ;<br> 
      Width:=4 ;<br> 
      Shape:=qrsVertLine ;<br> 
      Inherited Paint ;<br> 
    end ;<br> 
  end ;<br> 
        end ;<br> 
        <br> 
        procedure TMyQRShape.Print(OfsX,OfsY : Integer);<br> 
        begin<br> 
  with QRPrinter do<br> 
  begin<br> 
    case LineType  of<br> 
    BottomTop:<br> 
      begin<br> 
        Canvas.MoveTo(XPos(OfsX + Size.Left), YPos(OfsY + Size.Top)+Height) ;<br> 
        Canvas.LineTo(XPos(OfsX + Size.Left)+width,YPos(OfsY + Size.Top) ) ;<br> 
    end ;<br> 
    TopBottom:<br> 
      begin<br> 
        Canvas.MoveTo(XPos(OfsX + Size.Left), YPos(OfsY + Size.Top)) ;<br> 
        Canvas.LineTo(XPos(OfsX + Size.Left)+Width,YPos(OfsY + Size.Top)+Height ) ;<br> 
      end ;<br> 
    None:<br> 
      Inherited Print(OfsX,OfsY ) ;<br> 
    end ;<br> 
  end ;<br> 
        end;<br> 
        <br> 
        procedure Register;<br> 
        begin<br> 
  RegisterComponents(`QReport`, [TMyQRShape]);<br> 
        end;</td> 
    </tr> 
  </table> 
  </center> 
</div> 
<p>　</p> 
 
</body> 
 
</html> 
