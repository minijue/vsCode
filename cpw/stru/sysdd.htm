<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>操作系统调度</title>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
</head>

<body background="../res/back.JPG">

<p align="center"><strong>操作系统调度</strong></p>

<p>//操作系统调度<br>
#include &lt;iostream.h&gt;<br>
#include &lt;fstream.h&gt;<br>
#include &lt;string.h&gt;<br>
#include &lt;malloc.h&gt;<br>
#include &lt;stdlib.h&gt;<br>
#define ed NULL<br>
void diaodu(void);<br>
void shifang(int);<br>
typedef struct node_type{//内存链<br>
&nbsp;&nbsp;&nbsp; int start,len,fenp;<br>
struct node_type *next;<br>
}link;<br>
typedef struct dl_type{//队列<br>
&nbsp;&nbsp;&nbsp; int ip,len;<br>
}dls;<br>
dls dl[20];//定义20个元素的队列<br>
int dlz=0;<br>
link *h,*p,*q;<br>
int size,num;//定义内存总大小和进程数目<br>
ofstream Output(&quot;output2.txt&quot;);<br>
<br>
int main()<br>
{<br>
char* ch=&quot; &quot;;<br>
&nbsp;&nbsp;&nbsp; int count;// 定义循环变量<br>
&nbsp;&nbsp;&nbsp; int zj=0;<br>
<br>
ifstream Input(&quot;read2.txt&quot;);<br>
<br>
Input&gt;&gt;size&gt;&gt;num;<br>
cout&lt;&lt;size&lt;&lt;&quot; &quot;&lt;&lt;num&lt;&lt;endl;<br>
<br>
&nbsp;&nbsp;&nbsp; p=(link*)malloc(sizeof(link));<br>
&nbsp;&nbsp;&nbsp; h=p;<br>
p-&gt;start=0;<br>
p-&gt;len=size;<br>
p-&gt;next=ed;<br>
<br>
for(count=0;count&lt;num*2;count++)<br>
{<br>
Input&gt;&gt;ch;<br>
if(strcmp(ch,&quot;new&quot;)==0)<br>
{<br>
&nbsp;&nbsp;&nbsp; Input&gt;&gt;dl[dlz].ip&gt;&gt;dl[dlz].len;<br>
&nbsp;&nbsp;&nbsp; cout&lt;&lt;ch&lt;&lt;&quot; &quot;&lt;&lt;dl[dlz].ip&lt;&lt;&quot; 
&quot;&lt;&lt;dl[dlz].len&lt;&lt;endl;<br>
dlz++;<br>
diaodu();<br>
}<br>
else if(strcmp(ch,&quot;free&quot;)==0)<br>
{<br>
&nbsp;&nbsp;&nbsp; Input&gt;&gt;zj;<br>
cout&lt;&lt;ch&lt;&lt;&quot; &quot;&lt;&lt;zj&lt;&lt;endl;<br>
shifang(zj);<br>
diaodu();<br>
}<br>
else<br>
{<br>
cout&lt;&lt;&quot;输入错误!&quot;&lt;&lt;endl;<br>
exit(1);<br>
}<br>
}<br>
cin&gt;&gt;count;<br>
}<br>
void diaodu()<br>
{&nbsp;&nbsp;&nbsp; int i,l,ff=0;<br>
&nbsp;&nbsp;&nbsp; for(i=0;i&lt;dlz;i++)<br>
{<br>
&nbsp;&nbsp;&nbsp; p=h;<br>
&nbsp;&nbsp;&nbsp; do<br>
{<br>
&nbsp;&nbsp;&nbsp; if(p-&gt;len&gt;=dl[i].len&amp;&amp;p-&gt;fenp==0)<br>
{<br>
&nbsp;&nbsp;&nbsp; q=(link*)malloc(sizeof(link));<br>
q-&gt;next=p-&gt;next;<br>
q-&gt;start=p-&gt;start+dl[i].len;<br>
q-&gt;len=p-&gt;len-dl[i].len;<br>
q-&gt;fenp=0;<br>
p-&gt;fenp=dl[i].ip;<br>
p-&gt;len=dl[i].len;<br>
p-&gt;next=q;<br>
cout&lt;&lt;&quot; &quot;&lt;&lt;p-&gt;fenp&lt;&lt;&quot; 
&quot;&lt;&lt;p-&gt;start&lt;&lt;endl;<br>
Output&lt;&lt;p-&gt;fenp&lt;&lt;&quot; &quot;&lt;&lt;p-&gt;start&lt;&lt;endl;<br>
for(l=i;l&lt;dlz;l++)<br>
{<br>
&nbsp;&nbsp;&nbsp; dl[l].ip=dl[l+1].ip;<br>
dl[l].len=dl[l+1].len;<br>
}<br>
dl[l+1].ip=0;<br>
dl[l+1].len=0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
dlz--;<br>
ff=1;<br>
}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else p=p-&gt;next;<br>
}while(p!=ed&amp;&amp;ff==0);<br>
}<br>
}<br>
void shifang(int zj)<br>
{<br>
&nbsp;&nbsp;&nbsp; link* w;<br>
int ff=0,i,l;<br>
p=h;<br>
q=h;<br>
do<br>
{<br>
&nbsp;&nbsp;&nbsp; if(p-&gt;fenp==zj)<br>
{<br>
&nbsp;&nbsp;&nbsp; ff=1;<br>
&nbsp;&nbsp;&nbsp; if(p==h&amp;&amp;p-&gt;next!=ed)<br>
{<br>
&nbsp;&nbsp;&nbsp; w=p-&gt;next;<br>
if(w-&gt;fenp==0)<br>
&nbsp;&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p-&gt;next=w-&gt;next;<br>
&nbsp;&nbsp;&nbsp; p-&gt;len=p-&gt;len+w-&gt;len;<br>
&nbsp;&nbsp;&nbsp; p-&gt;fenp=0;<br>
&nbsp;&nbsp;&nbsp; free(w);<br>
}<br>
else<br>
{<br>
&nbsp;&nbsp;&nbsp; p-&gt;fenp=0;<br>
}<br>
}<br>
<br>
if(p!=h&amp;&amp;p-&gt;next==ed)<br>
{<br>
&nbsp;&nbsp;&nbsp; q=h;<br>
while(q-&gt;next!=p)<br>
q=q-&gt;next;<br>
if(q-&gt;fenp==0)<br>
{<br>
&nbsp;&nbsp;&nbsp; q-&gt;next=p-&gt;next;<br>
q-&gt;len=q-&gt;len+p-&gt;len;<br>
q-&gt;fenp=0;<br>
free(p);<br>
}<br>
else<br>
{<br>
&nbsp;&nbsp;&nbsp; p-&gt;fenp=0;<br>
}<br>
}<br>
<br>
if(p!=h&amp;&amp;p-&gt;next!=ed)<br>
{<br>
&nbsp;&nbsp;&nbsp; q=h;<br>
while(q-&gt;next!=p)<br>
&nbsp;&nbsp;&nbsp; q=q-&gt;next;<br>
w=p-&gt;next;<br>
if(q-&gt;fenp==0&amp;&amp;w-&gt;fenp==0)<br>
{<br>
&nbsp;&nbsp;&nbsp; q-&gt;next=w-&gt;next;<br>
q-&gt;len=q-&gt;len+p-&gt;len+w-&gt;len;<br>
q-&gt;fenp=0;<br>
free(p);<br>
free(w);<br>
}<br>
else if(q-&gt;fenp==0&amp;&amp;w-&gt;fenp!=0)<br>
{<br>
&nbsp;&nbsp;&nbsp; q-&gt;next=p-&gt;next;<br>
q-&gt;len=q-&gt;len+p-&gt;len;<br>
q-&gt;fenp=0;<br>
free(p);<br>
}<br>
else if(q-&gt;fenp!=0&amp;&amp;w-&gt;fenp==0)<br>
{<br>
&nbsp;&nbsp;&nbsp; p-&gt;next=w-&gt;next;<br>
p-&gt;len=p-&gt;len+w-&gt;len;<br>
p-&gt;fenp=0;<br>
free(w);<br>
}<br>
else<br>
{<br>
&nbsp;&nbsp;&nbsp; p-&gt;fenp=0;<br>
}<br>
}<br>
}<br>
else p=p-&gt;next;<br>
}while(p!=ed&amp;&amp;ff==0);<br>
<br>
//如果new还在队列里<br>
&nbsp;&nbsp;&nbsp; if(ff==0)<br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(i=0;i&lt;dlz;i++)<br>
&nbsp;&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(zj==dl[i].ip)<br>
&nbsp;&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(l=i;l&lt;dlz;l++)<br>
&nbsp;&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dl[l].ip=dl[l+1].ip;<br>
&nbsp;&nbsp;&nbsp; dl[l].len=dl[l+1].len;<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; dl[l+1].ip=0;<br>
&nbsp;&nbsp;&nbsp; dl[l+1].len=0;<br>
&nbsp;&nbsp;&nbsp; dlz--;<br>
&nbsp;&nbsp;&nbsp; }<br>
}<br>
}<br>
}</p>
</body>
</html>
