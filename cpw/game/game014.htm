<!-- Vignette StoryServer 4 Sat Aug 28 00:38:08 1999 -->
<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<!-- Vignette StoryServer 4 Fri Aug 27 23:14:32 1999 -->
<style type="text/css">
<!--
p,div {font-size:9pt; line-height:14pt; font-family:宋体;}
.p1{font-size:9pt;font-family:宋体; line-height:14pt;}
.p2{font-size:11pt;font-family:宋体;text-decoration: none;}
.p3{font-size:9pt;font-family:宋体;}
.p4{font-size:12pt;font-family:宋体;}
a:hover{color:red;}
a.t1:visited{color:red;}
-->
</style>
<title>开放源码下的游戏开发(2)</title>
</head>

<body bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080" alink="#FF0000"
topmargin="0">
<!-- Vignette StoryServer 4 Fri Aug 27 23:14:40 1999 -->
<!-- Vignette StoryServer 4 Sun Aug 29 14:08:33 1999 -->
<div align="center"><center>

<table border="0" cellspacing="2" cellpadding="0" width="95%" style="font-size: 9pt">
  <tr bgcolor="#CCFFCC">
    <td><span style="font-size: 9pt">现在的位置是： <b><a href="gameprg.htm">游戏设计</a>--&gt;</b> 
    </span>开放源码下的游戏开发(2)</td>
  </tr>
  <tr>
    <td></td>
  </tr>
</table>
</center></div><div align="center"><center>

<table border="1" width="95%" style="font-size: 9pt" bgcolor="#E8E8E8"
bordercolor="#C48C59" cellpadding="2">
  <tr>
    <td width="100%"><table border="1" width="32%" style="font-size: 9pt" height="30"
    cellspacing="0" cellpadding="2">
      <tr>
        <td width="100%" bgcolor="#4264B5"><p align="center"><font color="#FFFFFF">资料整理<span
        class="f">&middot;</span><a href="http://fasoft.yeah.net" target="_blank"
        style="color: rgb(255,255,255)">中国程序员网站</a></font></td>
      </tr>
    </table>
    </td>
  </tr>
  <tr>
    <td width="100%"><p align="center"><b>开放源码下的游戏开发(2)</b></p>
    <p align="center"><font color="black" size="-1">作者: Shawn Hargreaves</font></p>
    <p align="left"><strong>商业游戏向自由软件转化</strong> <br>
    <br>
    　　为了从游戏中赚到钱，你应该有一个拿得出手的作品。我相信在大多数场合下，开放源码之路对于改进模块中的源程序是一个比较好的办法。你可能不情愿你设计的一个精彩游戏被人玩过后就扔在角落里了。但如果你做法得当的话，你可能会同其他开发者合作，从而改进你的源程序库。 
    <br>
    <br>
    　　注：在极少数情况下，最成功的游戏可能得益于用户把它移植到一个新的平台上并加以改进，增加新的内容。这种情况即使在源码不开放的情况下也有可能成功(如Doom与Quake)。但事实表明，这种可能在成功的例子中的可能性只占不到万分之一。一些其他开发者也曾试着鼓励用户进行这种移植工作，但现在都没有消息了。 
    <br>
    <br>
    　　我认为两种办法会走向不同的极端。你把并不成熟的游戏卖给用户们，同时把你的源码给同样是在开发游戏的你的同行们。这显然和通常的Linux模式下的所有用户都是合作者的方式不同。但如果你把开发步骤分成两个不同的部分则会有更好的结果。一部分给艺术家，一部分给程序员。开放源码的想法对于商业终端开发者可能并不能很好的适用，但对于可再开发的游戏则会有惊人的效果，此是艺术家们也同时是终端用户。 
    <br>
    <br>
    　　虽然现在很少有游戏开发商采用了这种办法，但大趋势是不可阻挡的。现在唯一的困难是还没有足够的开发工具，而这正是基于互联网上的开放源码的优势所在。 
    <br>
    <br>
    　　大多数游戏公司已经开发出了一些室内工具、编辑器、文件转换器和一些实际上是代码库的模块。这些通常都很粗糙或很专业化，但对于开放源码来说却是好素材。如果你能够大致写出这些工具的基本模块，那对于其他人来说就不需要为你花费太大的精力为你去维护这个程序。同样的对于游戏本身的源码也一样，如源程序维护，物体动作等需要一遍又一遍的重复劳动。因为已经开发出来的游戏随着时间的改变而必须不断更新。如果一次性劳动就能达到最佳效果的话，将省却大量的人力物力。一些公司在尝试把内部模块标准化，但还不适用于整个程序本身。 
    <br>
    <br>
    　　这种方法固然好，但你得首先保证其他开发者能够在你的模块基础上开发，从而你能够把他人的成果搜集起来供自己用。你要在既能从外界获取更多有用的程序又能保证自己有足够的让其他开发者感兴趣的产品去出售这二者之间找到最佳结合点。如果你只是简单的发布一些源程序，而没有经过自己的组织和调试的话，大概不会有人会感兴趣的。 
    <br>
    <br>
    　　其中一条路是公布源码的同时公布一些初期数据。在开放源码准则下，你还可以把进一步的数据留作出售。对其他开发才来说，这是一种容易被他人接受的开放源码系统。对于用户来说，把初期数据作为免费的演示版下载同当前的惯例也没有什么不一样。 
    <br>
    <br>
    　　另外可行的办法是，把游戏中较专业化的部分保密，同时以库的形式开放其他部分的代码。这对于一些有保护意识的人来说可能会安全些，但实际上这并不是个好主意。这些库还得需要很多文档、例程和至少还得需要的一些使用环境，这个工作恐怕大家都不愿意做。如果你把全部可编译执行的游戏代码公开的话，从某种意义上来说，这能避免写太多的说明文档，这就大大减轻了劳动。 
    <br>
    <br>
    　　不管你采取哪种方式，都要尽量使用模块。这便于你收集所有程序中的改进，以方便你将来使用。但如果模块分得不好的话，这不会对你的工作有帮助。如果你知道谁都能改变游戏的主要模块，你要确信这些模块之间是互相独立的。我建议分成多个模块分别编译，然后链接成整个游戏。让用户认为这些模块都是可利用的，即使在程序员们对游戏升级后仍有保存价值。 
    <br>
    <br>
    　　在Magic Cauldron中，Eric Raymond提出了第三种可能的建议。他提到Doom开始时是作为有价值的经过智能加工的产品出现的，但后来其源码也开放了。我认为他在这里犯了个错误，因为他并未认识到游戏业的发展速度已变得多么快。ID开放Doom的源代码时，这些代码很难懂，但大家都在为这二代而工作，后来也未出来过更高版本。开放源码确实是他们的明智的举动，并且人们觉得剖析这样一个经典的游戏很有兴趣。但ID却不得不一直等到所有人的工作都已结束时为止。关于Doom几个增强的版本终于出现，但以当时的改进速度，根本无法用于今天的开发游戏中来。 
    <br>
    <br>
    　　我也反对如下言论：如果你想开放全部代码，那就直接开放不去管它了。如果是这样的话，即使你等上整整一年，你的代码只会对比你的技术落后一年的人有用，这些人可能会对你一年前做的工作加以改进。这种工作没有任何实际意义，只是一种良好的愿望而已，你不会从中得到什么益处。 
    <br>
    　　 <br>
    　　 <br>
    　　<strong>对编程高手的一点建议</strong> <br>
    <br>
    　　以下是写给因特网上的游戏程序员的：传统的开发工作可以抛弃了。如果商业游戏开发者们能够开放他们的源码，并且集中精力到他们自己所真正感兴趣的程序上。但目前我在网上所发现的和加入的和游戏相关的开发，现在还不能完全照我设想的那样发展下去。 
    <br>
    <br>
    　　就通常的游戏基本结构来说，Linux尚有两点不足：其一是一个比较成熟的3d 
    API，其二是一个较好的3d编辑器。API是一个急需解决的问题。感谢一些高手们在MESA和Xfree86上所做的工作。但由于没有一个好的软件包，游戏开发者们也离不开价格昂贵的商业软件。因此，若能开发出象相当于为Photoshop而设计的3D 
    Max之类的软件现在很重要。这个工作可能要经过几年艰苦的努力，并且你的成果也不会因此而进入排行榜。但这个工作可能恰恰是推进Linux下的游戏发展的最关键的一步。 
    <br>
    <br>
    　　在网上开发出好游戏的难度是在于能否保证整个游戏有个相同的风格。他们需要能够细致的不断解决一个个问题，并且也应该有个标准决定某个工作到什么时候就可以结束了。换句话说，他们是在一个集体环境里工作，而不是在一个市场上。如果光是把些有着不同想法的人人拉到一起，同时他们各自也都只朝着自己所想的去做的话，这是不会有什么结果的。大多数程序由于集成了一些天才的智慧而优秀，但对于游戏来说，让各种不同的思想在一个游戏中不互相冲突则会更好些。 
    <br>
    <br>
    　　显然，如果单靠一个人的力量，做出能够获取巨大利润的商业软件是不可能的。所以遇到困难时同其他人讨论和组织一个讨论组是很必要的。但据我的经验，这种做法并不可取。原因有二：第一，虽然在这样的讨论组中就某个问题你会得到一些答复，但你却很难找到两个意见相同的人。这会导致你把精力浪费到没有价值的讨论上去。第二，为了引起其他开发者对你的项目的注意，你还得绞尽脑汁描绘你的游戏会成为什么样子。同时你可能也不希望把光会一时冲动的人拉到你的项目中来。 
    <br>
    <br>
    　　我认为的一个较好的办法是考察网上软件业的发展史，从中总结出一些东西来。Unix是在一个标准协议的基础上建立的，具有非常稳定的结构的，同时包含有很多小块的操作系统。经验表明，高级程序员们擅长于做这样的东西，并且很多成功的例子在刚开始时规模都是很小的，后来才逐渐发展起来的。游戏产业在游戏结构和模块化应用方面做得很不好，但我们可以把我们擅长的地方来较好的实现模块化，而不是象其他程序员那样常在不情愿做的情况下开发。 
    <br>
    <br>
    　　我们的提议决不是为了进行编程风格的培养，而是不断寻找游戏所需要的新特点，单从themes.org站点就可以学到很多有用的东西。一点也看不出通常游戏的味道，我认为在开放源码方面取得最大成功的游戏莫过于象这样的一个游戏。聪明的程序员们会写出游戏的框架，在此之上可能再由其他更多的程序员们写出其他的程序，而最后的游戏可能是在一些考虑如何画图的艺术家们手里出来的。各个最小组也最多由两三人组成，他们在一起共同探讨某一个问题，但最关键的工作往往就是初期所做的工作。 
    <br>
    <br>
    　　如果你认为在Linux上所做的开发就属于自由软件的范畴，那么我想你可能不赞成在游戏开发中也公开源码。当你花了几年的时间做了一个大型游戏的框架最后发现你的名字只能在长长的readme文件的某个地方找到，所有荣誉都被做最后发布工作的人占去了。但从好的方面看，如果你的框架做得足够好的话，其生存周期还是远比现在的游戏其存在的时间长的。不可能是你所开发的游戏框架和游戏开发商所想的一模一样。如果能想法做出能把游戏在Linux和Windows平台下转换的工具，那对整个游戏产业的贡献将是不可估量的。 
    <br>
    <br>
    　　任何在Atari ST和Amiga时期成长起来的人可能认为很象老的游戏包，并能想到这些游戏包是多么的无用。但从那时起，很多东西已经变了。随着硬件的改进，任何细节的升级都会使你的程序的可再用性有所提高。作为开放源码，开发工具只是一个开始的地方，而不是一个让人捉摸不透的黑匣子。最重要的是，我们有很多可以利用的非常优秀的脚本语言。商业游戏开发商们本应知道好的脚本语言会让开发工作变得简单些，但他们却一再犯类似的错误。要么是他们用自己的脚本语言而导致开发工作受到种种限制，要么他们由于前期工作用的全部是C而导致开发人员也不得不抱住C不放。 
    <br>
    <br>
    　　有个现象让我感到欣慰：一些人在开发几乎相同的游戏。最近我访问了linuxgames.com站点，发现大多数新闻都是关于Doom,Quake和Loki的。这些新闻是关于这三个游戏的原始方式和一些讨论方式。我个人不发表哪个游戏更好的评论，但我仍怀疑这样做的价值。完全复制决不会让我觉得Linux下的游戏会比Windows下的更好。我我们需要做的是人们最近几年所没有玩过的游戏。从一个好的游戏获取其中的思想并不是不可以，但为什么不加入一些新的观点进去呢？这样就不会导致相同的拷贝了。请千万把&quot;克隆&quot;的思想从你的工作中抛弃。 
    <br>
    <br>
    　　归根到底，我相信Linux下游戏的发展还依赖于广大Linux爱好者自己。游戏编程人员通常错误的依赖他人能够写出更好的语句，但开放源码只有当我们都能够充分发挥我们自己的能力之后才会起到巨大的作用。在这个时代，光写几个循环语句可能并不会对在我们所喜受的操作系统上运行的游戏作出多大贡献，但有着大量的工作尚等待我们去做。大家赶快行动吧！ 
    <br>
    　　 <br>
    　　 <br>
    <br>
    　　鸣谢 <br>
    <br>
    　　本文是在Eric S. Raymond(esr@snark.thyrsus.com)的指导下完成的，在此表示感谢。 
    <br>
    　　同时我也要感谢Arron Shutt(version8@ashutt.demon.co.uk)的关于游戏问题的讨论。 
    <br>
    　　 <br>
    资料来源：<a href="http://www.linuxgazette.com.cn/">Linux公报中文版</a>　翻译：彭青松 
    </td>
  </tr>
</table>
</center></div><!-- item right -->
<!-- Vignette StoryServer 4 Fri Aug 27 23:13:53 1999 -->


<p><br clear="all">
</p>
</body>
</html>
